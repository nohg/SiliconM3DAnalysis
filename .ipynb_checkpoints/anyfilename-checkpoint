 3/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 3/2: run1d = m1d('multi_py/idl1.ba06_val3c')
 3/3: run1d.line[0].plot()
 3/4:
kr = 0
run3d = m3d('multi_py/m3d_output/', lines=[kr], conts=[])
 3/5:
fig, ax = plt.subplots(1,1)

for run in [run1d, run3d]:
    line = run.line[kr]
    label = ' '.join([run.dim, run.mode])
    line.plot(dlam=True, label=label)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 3/6: run1d.__dict__
 3/7: run3d.__dict__
 3/8: run1d.line[1].plot()
 3/9: run1d.line[3].plot()
 4/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 4/2: run1d = m1d('multi_py/idl1.ba06_val3c')
 4/3: run1d.line[0].plot()
 4/4:
kr = 0
run3d = m3d('multi_py/m3d_output/', lines=[kr], conts=[])
 4/5:
fig, ax = plt.subplots(1,1)

for run in [run1d, run3d]:
    line = run.line[kr]
    label = ' '.join([run.dim, run.mode])
    line.plot(dlam=True, label=label)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 4/6: run3d.__dict__
 4/7: run3d.__dict__
 4/8: run3d.__dict__
 4/9:
kr = 0
run3d = m3d('test_run/output/', lines=[kr], conts=[])
4/10:
fig, ax = plt.subplots(1,1)

for run in [run1d, run3d]:
    line = run.line[kr]
    label = ' '.join([run.dim, run.mode])
    line.plot(dlam=True, label=label)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 5/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 5/2:
kr = 0
run3d = m3d('test_run/output/', lines=[kr], conts=[])
 5/3:
fig, ax = plt.subplots(1,1)

for run in [run1d, run3d]:
    line = run.line[kr]
    label = ' '.join([run.dim, run.mode])
    line.plot(dlam=True, label=label)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 5/4:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[1]

plt.plot(line.lam, line.flux)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 5/5:
kr = 1
run3d = m3d('test_run/output/', lines=[kr], conts=[])
 5/6:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

plt.plot(line.lam, line.flux)

plt.legend(loc='lower left')
plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 5/7:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 5/8: plt.plot(line.lam, line.flux)
 5/9:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
5/10:
kr = 1
run3d = m3d('test_run/output/', lines=[kr], conts=[])
5/11:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
5/12: plt.plot(line.lam, line.flux)
5/13: run3d.__dict__
5/14: line.plot()
 6/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 6/2:
kr = 1
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
 6/3:
kr = 1
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
 6/4:
kr = 2
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
 6/5:
kr = 1
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
 6/6:
kr = 1
run3d = m3d('O_test_run/output/', lines=[], conts=[])
 6/7:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 6/8:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr][kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 6/9:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/10:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line

# plt.plot(line.lam, line.flux)
line[kr].plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/11:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line

# plt.plot(line.lam, line.flux)
line[0].plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/12:
kr = 0
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
6/13:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/14:
kr = 102
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
6/15:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/16:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[])
6/17:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
6/18:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
6/19: run3d.atmos
6/20: run3d.atmos.__dict__
6/21: run3d.atmos.tt
6/22: run3d.atmos.temp
6/23: run3d.atmos.temp.size
6/24: run3d.atmos.temp.shape
6/25:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau, T)
6/26:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])
6/27:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.yscale("log")
6/28:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
6/29:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
6/30:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
6/31: run3d.__dict__
6/32: plt.plot(line.lam, line.flux)
 7/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 7/2:
kr = 1
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
 7/3:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 7/4: plt.plot(line.lam, line.flux)
 7/5: run3d.__dict__
 7/6:
kr = 2
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
 7/7:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 7/8:
kr = 1
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
 7/9:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
7/10:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

# plt.xscale("log")
# plt.xlim(1e-2, 1e1)
# plt.ylim(4000, 10000)
7/11:
kr = 1
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[] , ratmos=True)
7/12:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
7/13: plt.plot(line.lam, line.flux)
7/14:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

# plt.xscale("log")
# plt.xlim(1e-2, 1e1)
# plt.ylim(4000, 10000)
7/15:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
# plt.xlim(1e-2, 1e1)
# plt.ylim(4000, 10000)
7/16:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
# plt.ylim(4000, 10000)
7/17:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
 8/1:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
 8/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 8/3:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
 8/4:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
ax.plot(lineNLTE)
# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 8/5:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
ax.lineNLTE.plot()
# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 8/6:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
lineNLTE.ax.plot()
# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 8/7:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(line.lam, line.flux)

# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 8/8:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux)

# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 8/9:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')


# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
8/10:
atmos = runLTE.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
7/18: [line.nq for line in run3d.line]
7/19:
kr = 1
run3d = m3d('Si_test_run/output/', conts=[] , ratmos=True)
7/20:
kr = 1
run3d = m3d('Si_test_run/output/')
7/21:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=krs)
7/22:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=krs, conts=[])
7/23:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=[20])
7/24:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=[20], conts=[])
7/25:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=[200], conts=[])
7/26:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=[287], conts=[])
7/27:
krs = np.arange(100)
run3d = m3d('Si_test_run/output/', lines=[286], conts=[])
7/28:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
7/29:
kr = 286
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
7/30:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 9/1:
# interesting lines 
runall = m3d('Si_test_run/output/', lines=[], conts=[])
 9/2:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 9/3:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
 9/4:
kr = 286
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
 9/5:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 9/6: [line.nq for line in run3d.line]
 9/7:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
 9/8:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
 9/9:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
9/10:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
9/11:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
# lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')


plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
10/1:
fig, ax = plt.subplots(1,1, figsize=(12, 3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')


# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
10/2:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
10/3:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
10/4:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
10/5:
fig, ax = plt.subplots(1,1, figsize=(12, 3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')


# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
10/6:
fig, ax = plt.subplots(1,1, figsize=(12, 3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')

ax.set_xlim(7770,7780)

# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
10/7:
fig, ax = plt.subplots(1,1, figsize=(12, 3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')

ax.set_xlim(7770,7778)

# line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
9/12:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
# lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')

ax.set_xlim(5689,5692)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
9/13:
fig, ax = plt.subplots(1,1, figsize=(12,3.75))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]

# plt.plot(line.lam, line.flux)
# lineLTE = runLTE.line[kr]

plt.plot(lineNLTE.lam, lineNLTE.flux, label='NLTE')
plt.plot(lineLTE.lam, lineLTE.flux, label='LTE')

ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/1:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
11/3:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
11/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/6:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
11/7:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot()
lineLTE.plot()
ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/8:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='sfsd')
lineLTE.plot()
ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
11/9:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
12/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
12/2:
kr = 286
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
12/3:
kr = 286
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
12/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
12/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
# ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
12/6:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
12/7:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
# ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
13/1:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
13/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
13/3:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
13/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE')
lineLTE.plot(label='LTE')
ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
14/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
14/2:
kr = 103
run3d = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
14/3:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
14/4:
fig, ax = plt.subplots(1,1)

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
14/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

line = run3d.line[kr]

# plt.plot(line.lam, line.flux)
line.plot()

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
15/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
15/2:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
15/3:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')
ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
15/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
15/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH.line[kr]
# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
16/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
16/2:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)')
16/3:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True))
16/4:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
16/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH.line[kr]
lineLTE_BICH = runLTE_BICH.line[kr]

# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')
lineLTE_BICH.plot(label='LTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
16/6:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
16/7:
kr = 103
run3d = m3d('O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
16/8:
kr = 103
run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
16/9:
kr = 103
run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
16/10:
kr = 103
run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('runs/O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
16/11:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH.line[kr]
lineLTE_BICH = runLTE_BICH.line[kr]

# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')
lineLTE_BICH.plot(label='LTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
17/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
17/2:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
18/1:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
18/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
18/3:
kr = 292
run3d = m3d('Si_test_run/output/', lines=[kr], conts=[])
runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
18/4:
kr = 292
runLTEfalc = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[])
# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
18/5:
kr = 292
runLTEfalc = m3d('run/Si_LTE_falc_run/output/', lines=[kr], conts=[])
# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
20/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
20/2:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
20/3:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
20/4:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
#runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
20/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
20/6:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
20/7: runNLTEfalc.abnd
20/8:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
#runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
20/9:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
21/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
21/2:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
#runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
21/3:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
21/4:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
#runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
21/5:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)

plt.legend(loc='lower left')
21/6:
# file = 'input/atmos/t5777g44m0005/t5777g44m0005_00020.dat'
# tmp = np.memmap(file).reshape((240,240,-1, 6))
# tmp
21/7:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)
ax.set_ylim(logspace)

plt.legend(loc='lower left')
21/8:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)
ax.set_yscale('log')

plt.legend(loc='lower left')
21/9:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
lineLTEfalc = runLTEfalc.line[kr]
lineNLTEfalc = runNLTEfalc.line[kr]

# plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE')
lineLTEfalc.plot(label='LTE falc')
lineNLTEfalc.plot(label='NLTE falc')

ax.set_xlim(5690,5691)
# ax.set_yscale('log')

plt.legend(loc='lower left')
21/10: runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[], conts=[])
21/11: runtest.shape
21/12: runtest.length
21/13: runtest.len
21/14: print(runtest)
21/15: runtest.__dict__
21/16:
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[], conts=[])
runtest(kr=1)
21/17: runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[1], conts=[])
21/18:
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[1], conts=[])
linetest = runtest.line[1]
21/19:
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[1], conts=[])
linetest = runtest.line[1]
linetest.plot()
21/20:
krtest = 292
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[1], conts=[])
linetest = runtest.line[1]
linetest.plot()
21/21:
krtest = 292
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[], conts=[])
linetest = runtest.line[krtest]
linetest.plot()
21/22:
krtest = 292
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
linetest.plot()
21/23:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
linetest.plot()
21/24:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[]
linetest.plot()
21/25:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line
linetest.plot()
21/26:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[ktest]
# linetest.plot()
runtest.nq
21/27:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
runtest.nq
21/28: lineLTEfalc.__dict__
21/29: runNLTEfalc.nnu
21/30:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
runtest.nnu
21/31: runtest.__dict__
21/32:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu
21/33:
krtest = 2
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/34:
krtest = 20
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/35:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/36:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/37:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/38:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/39:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/40:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/41:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/42:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/43:
for i in range(2955):
    print(i)
21/44:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/45:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/46:
biglines = []
for i in range(2955):
    runthis = m3d('runs/Si_falc_LTE_run/output/', lines=[i], conts=[])
    linethis = runthis.line[i]
    if linethis.nnu > 110:
        biglines.append[i]
21/47:
krtest = 0
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/48:
biglines = []
for i in range(2955):
    runthis = m3d('runs/Si_falc_LTE_run/output/', lines=[i], conts=[])
    linethis = runthis.line[i]
    if linethis.nnu > 110:
        biglines.append[i]
    print(i)
21/49:
krtest = 6
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/50:
krtest = 6
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
21/51:
biglines = []
for i in range(2955):
    runthis = m3d('runs/Si_falc_LTE_run/output/', lines=[i], conts=[])
    linethis = runthis.line[i]
    if linethis.nnu > 110:
        biglines.append[i]
    print(i)
21/52:
biglines = []
for i in range(2955):
    print(i)

    runthis = m3d('runs/Si_falc_LTE_run/output/', lines=[i], conts=[])
    linethis = runthis.line[i]
    if linethis.nnu > 110:
        biglines.append[i]
21/53: runthis = m3d('runs/Si_falc_LTE_run/output/', conts=[])
22/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
22/2:
kr = 103
run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('runs/O_test_LTE/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
22/3:
kr = 103
run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
22/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH.line[kr]
lineLTE_BICH = runLTE_BICH.line[kr]

# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')
lineLTE_BICH.plot(label='LTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
23/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
23/2:
krtest = 6
runtest = m3d('runs/Si_falc_LTE_run/output/', conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
23/3: np.array([line.nnu for line in runtest.line])
23/4: nnus = np.array([line.nnu for line in runtest.line])
23/5:
nnus = np.array([line.nnu for line in runtest.line])
nnus.shape
23/6: majlines = runtest[nnus > 100].line
23/7:
majlinesindex = nnus[nnus>100]
 = runtest.line
24/1:
runthis = m3d('runs/Si_falc_LTE_run/output/', conts=[])
nnus = [runthis.line.nnu for line in runthis.lines]
24/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
24/3:
krtest = 6
runtest = m3d('runs/Si_falc_LTE_run/output/', lines=[krtest], conts=[])
linetest = runtest.line[krtest]
# linetest.plot()
linetest.nnu, runtest.atom
24/4:
runthis = m3d('runs/Si_falc_LTE_run/output/', conts=[])
nnus = [runthis.line.nnu for line in runthis.lines]
24/5:
runthis = m3d('runs/Si_falc_LTE_run/output/', conts=[])
nnus = [runthis.line.nnu for line in runthis.line]
24/6: nnus = [runthis.line.nnu for line in runthis.line]
24/7: nnus = [runthis.nnu for line in runthis.line]
24/8: nnus
24/9: runthis.line
24/10: nnus = [line.nnu for line in runthis.line]
24/11: nnus
24/12: runthis = m3d('runs/Si_falc_LTE_run/output/', conts=[])
24/13: nnus = np.array[line.nnu for line in runthis.line]
24/14: nnus = [line.nnu for line in runthis.line]
24/15: majorlinesindex = runthis.line[nnus > 100]
24/16: nnus[nnus > 100]
24/17:
nnus = [line.nnu for line in runthis.line]
np.array(nnus)
24/18: majorlinesindex = runthis.line[nnus > 100]
24/19: nnus[nnus > 100]
24/20: nnus
24/21: nnus > 10
24/22: where nnus > 10
24/23: print(nnus[nnus!=1])
24/24: print(nnus[nnus!=1])
24/25: print(nnus[nnus==1])
24/26:
nnus = [line.nnu for line in runthis.line]
nnus.array
24/27:
nnus = [line.nnu for line in runthis.line]
nnus.np.array
24/28:
nnus = [line.nnu for line in runthis.line]
np.array.nnus
24/29:
nnus = [line.nnu for line in runthis.line]
nnus = np.array(nnus)
24/30: print(nnus[nnus==1])
24/31: print(nnus[nnus!=1])
24/32: print(nnus[nnus>100])
24/33: majlines = runthis.line[nnus[nnus>100]]
24/34: majlines = runthis.line[np.where(nnus>100)]
24/35: np.where(nnus>100)
24/36:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
24/37: majlines = [runthis.line for line in runthis.line if line.nnus > 100]
24/38: majlines = [runthis.line for line in runthis.line if line.nnu > 100]
24/39: majlines
24/40: majlines.shape
24/41: majlines.len
24/42: len(majlines)
24/43:
# krtest = 6
# runtest = m3d('runs/Si_falc_LTE_run/output/', conts=[])
# linetest = runtest.line[krtest]
# # linetest.plot()
# linetest.nnu, runtest.atom
24/44:
# nnus = [line.nnu for line in runthis.line]
# nnus = np.array(nnus)
24/45:
majlines = [runthis.line for line in runthis.line if line.nnu > 100]
num_majlines = len(majlines)
24/46:
kr = 292
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/', lines=[kr], conts=[])
#runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=[kr], conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[kr], conts=[])

# runLTE = m3d('Si_LTE_falc_run/output/', lines=[kr], conts=[], ratmos=True)
24/47: fig, ax = plt.subplots(2,1, figsize=(20,5))
24/48:
fig, ax = plt.subplots(num_majlines,1, figsize=(20,5))

for i, line in enumerate(majlines):
    ax.i.plot(line.lam, line.flux)
24/49:
fig, ax = plt.subplots(num_majlines,1, figsize=(20,5))

for i, line in enumerate(majlines):
    ax[i].plot(line.lam, line.flux)
24/50: plt.plot(majlines[1])
24/51:
fig, ax = plt.subplots(num_majlines,1, figsize=(20,5))

for i, line in enumerate(majlines):
    line.plot(line.lam, line.flux)
24/52: majlines
24/53: majlines[1]
24/54: majlines[,1]
24/55: majlines[:,1]
24/56: majlines]
24/57: majlines.shape
24/58:
majlines = np.array[runthis.line for line in runthis.line if line.nnu > 100]
num_majlines = len(majlines)
24/59:
majlines = [runthis.line for line in runthis.line if line.nnu > 100]
num_majlines = len(majlines)
24/60: list(majlines)
24/61: majlines.list
24/62: majlines
24/63: type(majlines)
24/64:
type(majlines)
majlines[0]
24/65:
type(majlines)
np.shape(majlines[0])
24/66:
type(majlines)
np.shape(majlines)
24/67: np.shape(runthis)
24/68: majlines[:,0]
24/69: majlines.nnu
24/70: majlines[0].nnu
24/71: majlines[0,0].nnu
24/72: line.plot for line in majlines
24/73:
for line in majlines:
    line.plot
24/74: print(majlines)
24/75:
majlines = [runthis for line in runthis.line if line.nnu > 100]
num_majlines = len(majlines)
24/76: print(majlines)
24/77:
type(majlines)
np.shape(majlines)
24/78:
for majline in majlines:
    majline.line.plot
24/79: np.shape(majlines)
24/80:
for majline in majlines:
    majline.plot
24/81:
for majline in majlines:
    print(majline)
24/82:
for majline in majlines:
    majline.__dict__
24/83: majlines = np.array(majlines)
24/84:
for majline in majlines:
    majline.__dict__
24/85:
for majline in majlines:
    print(majline.__dict__)
24/86:
for majline in majlines.line:
    print(majline.__dict__)
24/87: majlines = np.array(majlines.line)
24/88:
majlines = [runthis for line in runthis.line if line.nnu > 100]
num_majlines = len(majlines)
24/89: print(majlines)
24/90: majlines = np.array(majlines.line)
24/91: np.shape(runthis)
24/92: runthis[1]
24/93: runthis.line[1]
24/94: runthis.line[1].plot
24/95: runthis.line[1].plt.plot
24/96: linetest = runthis.line[1]
24/97: linetest.nnu
24/98: linetest.plot
24/99:
fig, ax = plt.subplots(1,1, figsize=(20,5))
linetest.plot
24/100: linetest = runthis.line[255]
24/101:
fig, ax = plt.subplots(1,1, figsize=(20,5))
linetest.plot
24/102: linetest = runthis.line[6]
24/103:
fig, ax = plt.subplots(1,1, figsize=(20,5))
linetest.plot
24/104:
fig, ax = plt.subplots(1,1, figsize=(20,5))
plt.plot(linetest.lam, linetest.flux)
24/105:
fig, ax = plt.subplots(1,1, figsize=(20,5))
#plt.plot(linetest.lam, linetest.flux)
linetest.plot
24/106: runthis.line[6].nnu
24/107:
majorlines = []
for i, thisline in enumerate(runthis.line):
    if thisline.nnu > 100:
        majorlines.append(thisline)
24/108: majorlines
24/109: majorlines[0]
24/110: majorlines[0].nnu
24/111: majorlines[0].plot
24/112:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(20,5))

for i, thisline in enumerate(majorlines):
    line.plot(thisline.lam, thisline.flux)
24/113:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(20,5))

for i, thisline in enumerate(majorlines):
    ax.plot(thisline.lam, thisline.flux)
24/114:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(20,5))

for i, thisline in enumerate(majorlines):
    ax[1].plot(thisline.lam, thisline.flux)
24/115:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(20,5))

for i, thisline in enumerate(majorlines):
    ax[i].plot(thisline.lam, thisline.flux)
24/116:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(50,5))

for i, thisline in enumerate(majorlines):
    ax[i].plot(thisline.lam, thisline.flux)
24/117:
fig, ax = plt.subplots(len(majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(majorlines):
    ax[i].plot(thisline.lam, thisline.flux)
25/1:
runLTEfalc = m3d('runs/O_test_run/output/',  conts=[], ratmos=True)
runNLTEfalc = m3d('runs/O_test_LTE_run/output/',  conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
25/2:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[], ratmos=True)
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
25/3:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
25/4:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
25/5:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[], ratmos=True)
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
25/6:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
26/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
26/2:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
26/3:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
26/4:
fig, ax = plt.subplots(1,1, figsize=(20,5))

# for run in [run1d, run3d]:
#     line = run.line[kr]
#     label = ' '.join([run.dim, run.mode])
#     line.plot(dlam=True, label=label)

lineNLTE = run3d.line[kr]
lineLTE = runLTE.line[kr]
lineNLTE_BICH = runNLTE_BICH.line[kr]
lineLTE_BICH = runLTE_BICH.line[kr]

# plt.plot(line.lam, line.flux)
lineNLTE.plot(label='NLTE falc')
lineLTE.plot(label='LTE falc')
lineNLTE_BICH.plot(label='NLTE BICH')
lineLTE_BICH.plot(label='LTE BICH')

ax.set_xlim(7770,7778)

plt.legend(loc='lower left')
# plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
24/118:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
24/119: falcLTErun = m3d('runs/Si_falc_LTE_run/output/', conts=[])
24/120: falcLTE_majorlines = get_majorlines(falcLTErun)
24/121:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux)
26/5:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
26/6: runLTEfalc.__name__
26/7:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
26/8:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))

for run in [LTEfalc_majorlines, NLTEfalc_majorlines]:

    for i, thisline in enumerate(run):
        ax[i].plot(thisline.lam, thisline.flux)
26/9:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')
26/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

ax.legend()
26/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

fig.legend(loc='lower left')
27/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
27/2:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
27/3:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
27/4:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
27/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
27/6:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

fig.legend(loc='lower left')
27/7:
# fig, ax = plt.subplots(1,1, figsize=(20,5))

# # for run in [run1d, run3d]:
# #     line = run.line[kr]
# #     label = ' '.join([run.dim, run.mode])
# #     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
# lineLTE = runLTE.line[kr]
# lineNLTE_BICH = runNLTE_BICH.line[kr]
# lineLTE_BICH = runLTE_BICH.line[kr]

# # plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE falc')
# lineLTE.plot(label='LTE falc')
# lineNLTE_BICH.plot(label='NLTE BICH')
# lineLTE_BICH.plot(label='LTE BICH')

# ax.set_xlim(7770,7778)

# plt.legend(loc='lower left')
# # plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
27/8:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
27/9:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
27/10: runLTEBICH = runLTE_BICH
27/11:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
27/12:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

fig.legend(loc='lower left')
27/13:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
27/14:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
27/15:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
27/16:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
27/17:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
27/18:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

fig.legend(loc='lower left')
27/19:
# fig, ax = plt.subplots(1,1, figsize=(20,5))

# # for run in [run1d, run3d]:
# #     line = run.line[kr]
# #     label = ' '.join([run.dim, run.mode])
# #     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
# lineLTE = runLTE.line[kr]
# lineNLTE_BICH = runNLTE_BICH.line[kr]
# lineLTE_BICH = runLTE_BICH.line[kr]

# # plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE falc')
# lineLTE.plot(label='LTE falc')
# lineNLTE_BICH.plot(label='NLTE BICH')
# lineLTE_BICH.plot(label='LTE BICH')

# ax.set_xlim(7770,7778)

# plt.legend(loc='lower left')
# # plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
27/20:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
29/1:
falcLTErun = m3d('runs/Ba_falc_LTE_run/output/', conts=[])
BICHLTErun = m3d('runs/Ba_BICH_LTE_run/output/', conts=[])
31/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
31/2:
# krtest = 6
# runtest = m3d('runs/Si_falc_LTE_run/output/', conts=[])
# linetest = runtest.line[krtest]
# # linetest.plot()
# linetest.nnu, runtest.atom

# nnus = [line.nnu for line in runthis.line]
# nnus = np.array(nnus)
31/3:
falcLTErun = m3d('runs/Ba_falc_LTE_run/output/', conts=[])
BICHLTErun = m3d('runs/Ba_BICH_LTE_run/output/', conts=[])
31/4:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
31/5:
falcLTE_majorlines = get_majorlines(falcLTErun)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
31/6:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
31/7:
# krtest = 6
# runtest = m3d('runs/Si_falc_LTE_run/output/', conts=[])
# linetest = runtest.line[krtest]
# # linetest.plot()
# linetest.nnu, runtest.atom

# nnus = [line.nnu for line in runthis.line]
# nnus = np.array(nnus)
31/8:
falcLTErun = m3d('runs/Ba_falc_LTE_run/output/', conts=[])
BICHLTErun = m3d('runs/Ba_BICH_LTE_run/output/', conts=[])
31/9:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
31/10:
falcLTE_majorlines = get_majorlines(falcLTErun)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
31/11:
falcLTE_majorlines = get_majorlines(falcLTErun)
LTEBICH_majorlines = get_majorlines(BICHLTErun)
31/12:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux)

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')
31/13:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')
31/14:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# fig.legend(loc='lower left')
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())
31/15:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# fig.legend(loc='lower left')
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='top left')
31/16:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# fig.legend(loc='lower left')
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='upper left')
31/17:
fig, ax = plt.subplots(len(falcLTE_majorlines), 1, figsize=(15,20))

for i, thisline in enumerate(falcLTE_majorlines):
    ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# fig.legend(loc='lower left')
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
31/18: BICHLTErun.__dict_
31/19: BICHLTErun.__dict__
31/20: BICHLTErun.abund
31/21: falcLTE_majorlines[1].abund
31/22: falcLTE_majorlines[1].plot
30/1:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTE_BICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
30/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
30/3:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
30/4:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTE_BICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
30/5:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
30/6:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
30/7:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
30/8:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
30/9:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
30/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

fig.legend(loc='lower left')
30/11:
# fig, ax = plt.subplots(1,1, figsize=(20,5))

# # for run in [run1d, run3d]:
# #     line = run.line[kr]
# #     label = ' '.join([run.dim, run.mode])
# #     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
# lineLTE = runLTE.line[kr]
# lineNLTE_BICH = runNLTE_BICH.line[kr]
# lineLTE_BICH = runLTE_BICH.line[kr]

# # plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE falc')
# lineLTE.plot(label='LTE falc')
# lineNLTE_BICH.plot(label='NLTE BICH')
# lineLTE_BICH.plot(label='LTE BICH')

# ax.set_xlim(7770,7778)

# plt.legend(loc='lower left')
# # plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
30/12:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
32/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
32/2:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
32/3:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
32/4:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
32/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
32/6:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

fig.legend(loc='lower left')
32/7:
# fig, ax = plt.subplots(1,1, figsize=(20,5))

# # for run in [run1d, run3d]:
# #     line = run.line[kr]
# #     label = ' '.join([run.dim, run.mode])
# #     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
# lineLTE = runLTE.line[kr]
# lineNLTE_BICH = runNLTE_BICH.line[kr]
# lineLTE_BICH = runLTE_BICH.line[kr]

# # plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE falc')
# lineLTE.plot(label='LTE falc')
# lineNLTE_BICH.plot(label='NLTE BICH')
# lineLTE_BICH.plot(label='LTE BICH')

# ax.set_xlim(7770,7778)

# plt.legend(loc='lower left')
# # plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
32/8:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
35/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
35/2:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
35/3:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
35/4:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
36/1:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
36/2:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
36/3:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
36/4:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
36/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
36/6:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/7:
# fig, ax = plt.subplots(1,1, figsize=(20,5))

# # for run in [run1d, run3d]:
# #     line = run.line[kr]
# #     label = ' '.join([run.dim, run.mode])
# #     line.plot(dlam=True, label=label)

# lineNLTE = run3d.line[kr]
# lineLTE = runLTE.line[kr]
# lineNLTE_BICH = runNLTE_BICH.line[kr]
# lineLTE_BICH = runLTE_BICH.line[kr]

# # plt.plot(line.lam, line.flux)
# lineNLTE.plot(label='NLTE falc')
# lineLTE.plot(label='LTE falc')
# lineNLTE_BICH.plot(label='NLTE BICH')
# lineLTE_BICH.plot(label='LTE BICH')

# ax.set_xlim(7770,7778)

# plt.legend(loc='lower left')
# # plt.savefig('multi_py/Ba06_{}.eps'.format(kr+1))
36/8:
atmos = run3d.atmos
T = atmos.temp
tau = atmos.tau

plt.plot(tau[0,0], T[0,0])

plt.xscale("log")
plt.xlim(1e-2, 1e1)
plt.ylim(4000, 10000)
36/9: LTEfalc_majorlines[1].line
36/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for p in len(LTEBICH_majorlines):
        print(p)

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for p in ax:
        print(p)

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/12:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for thisax in ax:
        scale_factor = 1/2
        xmin, xmax = thisax.xlim()
        ymin, ymax = thisax.ylim()

        thisax.xlim(xmin * scale_factor, xmax * scale_factor)
        thisax.ylim(ymin * scale_factor, ymax * scale_factor)

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/13:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for thisax in ax:
        scale_factor = 1/2
        xmin, xmax = fig.xlim()
        ymin, ymax = fig.ylim()

        thisax.xlim(xmin * scale_factor, xmax * scale_factor)
        thisax.ylim(ymin * scale_factor, ymax * scale_factor)

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/14: ax[0].ylim
36/15: ax[0].set_ylim
36/16: ax[0].ylim
36/17:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/18: LTEfalc_majorlines[1].plot()
36/19:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/20:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/21: LTEfalc_majorlines[1].qmax
36/22:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 90:
            majorlines.append(thisline)
    return majorlines
36/23:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
36/24:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/25: LTEfalc_majorlines[1].qmax = 60
36/26:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/27:
import matplotlib.pyplot as plt
from multi_py.multi import *

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
36/28:
# kr = 103
# run3d = m3d('runs/O_test_run/output/', lines=[kr], conts=[], ratmos=True)
# runLTE = m3d('runs/O_test_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
# runNLTE_BICH = m3d('runs/O_test_run_BICH/output/', lines=[kr], conts=[], ratmos=True)
# runLTE_BICH = m3d('runs/O_BICH_LTE_run/output/', lines=[kr], conts=[], ratmos=True)
36/29:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
36/30:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 90:
            majorlines.append(thisline)
    return majorlines
36/31:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
36/32:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/33:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        thisline.qmax = 60
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        thisline.qmax = 60
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        thisline.qmax = 60
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        thisline.qmax = 60
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/34:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        thisline.qmax = 40
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        thisline.qmax = 40
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        thisline.qmax = 40
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        thisline.qmax = 40
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/35:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/36:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/O_stag_LTE_5x5x230_run/output/', conts=[])
36/37:
runLTEfalc = m3d('runs/O_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/O_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/O_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/O_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/O_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/O_stag_NLTE_5x5x230_run/output/', conts=[])
36/38:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
36/39:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/40:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

for i, thisline in enumerate(LTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

for i, thisline in enumerate(NLTEBICH_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE BICH')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
36/41:
fig2, ax2 = plt.subplots(figsize=(10,5))
LTEfalc_majorlines[1].plot()
36/42:
fig2, ax2 = plt.subplots(figsize=(10,5))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
36/43:
fig2, ax2 = plt.subplots(figsize=(10,5))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')
36/44:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')
36/45:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')

plt.set_xlim(7770,7780)
36/46:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')

ax2.set_xlim(7770,7780)
36/47:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')

ax2.set_xlim(7770,7777)
36/48:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')



ax2.set_xlim(7770,7777)
36/49:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend

ax2.set_xlim(7770,7777)
36/50:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
LTEBICH_majorlines[1].plot(label='LTE BICH')
NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(7770,7777)
37/1:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
37/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
37/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
37/4:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
37/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
LTEBICH_majorlines = get_majorlines(runLTEBICH)
NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
37/6:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
37/7:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
37/8:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
37/9:
# runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
37/10:
# LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
37/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
37/12:
# LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
37/13:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,20))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
37/14:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

# ax2.set_xlim(7770,7777)
37/15:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(5684,5685)
38/1:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
38/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
38/3:
# runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
38/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
38/5:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
38/6:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 100:
            majorlines.append(thisline)
    return majorlines
38/7:
# LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
38/8:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
38/9:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
38/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(15,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
38/11:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(5684,5685)
38/12:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
39/1:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
39/2:
data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin(data_dir, 'iag_sun.sav')
39/3:
data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin(data_dir, 'iag_sun.sav')
sav_data = readsav(sav_fname)
39/4: sio.__file__
40/1: spec_read.ipynb.__file__
40/2: spec_read.ipynb.__file__
40/3: 'spec_read.ipynb.'__file__
40/4:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('iag_sun.sav')
sav_data = readsav(sav_fname)
40/5:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
40/6:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('iag_sun.sav')
sav_data = readsav(sav_fname)
40/7:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('./iag_sun.sav')
sav_data = readsav(sav_fname)
40/8:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('./iag_sun.sav')
sav_data = readsav(sav_fname)
40/9:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('iag_sun.sav')
sav_data = readsav(sav_fname)
40/10: print(sav_data.keys())
40/11: print(sav_data['iag_sun'])
40/12: sav_data['iag_sun']
40/13: sav_data['iag_sun'][0]
40/14: sav_data['iag_sun']
40/15: sav_data['iag_sun'].mus
40/16: sav_data['iag_sun'].__dict__
40/17: sav_data['iag_sun']
40/18: sav_data['iag_sun'].flux
40/19: sav_data['iag_sun'].flux[0]
40/20: sav_data['iag_sun'].flux[0][0]
40/21: sav_data['iag_sun'].flux
40/22: lam = sav_data['iag_sun'].lam[0][0]
40/23: lam = sav_data['iag_sun'].lam[0]
40/24: av_data['iag_sun'].lam[0]
40/25: av_data['iag_sun'].wave
40/26: sav_data['iag_sun'].wave
40/27: sav_data['iag_sun'].wave[0]
40/28: sav_data['iag_sun'].wave[0]
40/29: sav_data['iag_sun'].wave
40/30: sav_data['iag_sun'].wave[0,0]
40/31: sav_data['iag_sun'].wave[0][0]
40/32:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import matplotlib.pyplot as plt
40/33:
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

plt.plot(lam, flux)
40/34:
fig, ax = plt.subplots(figsize=(10,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

plt.plot(lam, flux)
40/35:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

plt.plot(lam, flux)
40/36: (sav_data['iag_sun']
40/37: sav_data['iag_sun']
40/38: sav_data['iag_sun'].shape
40/39: sav_data['iag_sun'].shape()
40/40: sav_data['iag_sun']
40/41: sav_data['iag_sun'][0]
40/42: sav_data['iag_sun'][0].shape
40/43: sav_data['iag_sun'][0]
40/44: sav_data['iag_sun'][0][0]
40/45: sav_data['iag_sun'][0]
40/46: sav_data['iag_sun']
40/47:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

ax.set_xlim(7000, 7300)

plt.plot(lam, flux)
40/48:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)

plt.plot(lam, flux)
40/49:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/50:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/51:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][1]
flux = sav_data['iag_sun'].flux[0][1]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/52:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/53:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[1][0]
flux = sav_data['iag_sun'].flux[1][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/54:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/55: sav_data['iag_sun'].wave[0].shape
40/56:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][10]
flux = sav_data['iag_sun'].flux[0][10]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/57:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
40/58:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
plt.xlim(7771, 7777)
40/59:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux)
#plt.xlim(7771, 7777)
40/60:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
#plt.xlim(7771, 7777)
40/61:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(6299, 6301)
40/62:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(6298, 6302)
41/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
41/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
41/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
42/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
42/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
42/3:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
42/4:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
42/5: LTEfalc_majorlines.__dict__
42/6: LTEfalc_majorlines[0].__dict__
42/7: LTEfalc_majorlines[0].kr
42/8:
# Read in only the major lines of the other files to save time and space
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
42/9: maj
42/10: major_krs
42/11:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
42/12: runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
42/13: runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[major_krs],  conts=[])
42/14: major_krs
42/15: runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[major_krs],  conts=[])
42/16:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
42/17:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
43/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
43/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
43/3:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
43/4:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
43/5:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
43/6: major_krs
43/7: runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=[major_krs],  conts=[])
43/8: runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
43/9:
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
43/10:
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
43/11:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
43/12:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
43/13:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
43/14:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
43/15:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
43/16: major_krs
43/17:
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
44/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
44/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
44/3:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
44/4:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
44/5:
def get_majorlines(runthis):

    majorlines = []
    for i, thisline in enumerate(runthis.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
44/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
44/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
44/8: major_krs
44/9:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
44/10:
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
44/11:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines

def get_lines(thisrun):
    lines = []
    for _, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
44/12:
NLTEfalc_majorlines = get_lines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
44/13:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
44/14:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
44/15:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
44/16:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
44/17:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines

def get_lines(thisrun):
    lines = []
    for _, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
44/18:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines

def get_lines(thisrun):
    lines = []
    for _, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
44/19:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
44/20:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
44/21: major_krs
44/22:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
44/23:
NLTEfalc_majorlines = get_lines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
44/24:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
44/25: NLTEfalc_majorlines.plot
44/26: NLTEfalc_majorlines[2].plot
44/27: NLTEfalc_majorlines[2]
44/28: NLTEfalc_majorlines[2].__dict__
44/29:
def get_lines(thisrun):
    lines = []
    for i, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
44/30:
NLTEfalc_majorlines = get_lines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
44/31: NLTEfalc_majorlines[2].__dict__
44/32:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc
44/33:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.plot
44/34:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc[1]
44/35:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.line
45/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
45/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
45/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
45/4:
def get_lines(thisrun):
    lines = []
    for i, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
45/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
45/6:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
45/7: major_krs
45/8:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
45/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
45/10:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.line
45/11: NLTEfalc_majorlines.line
45/12: NLTEfalc_majorlines = [thisline.line for thisline in runNLTEfalc]
45/13: NLTEfalc_majorlines = [thisline.line for thisline in runNLTEfalc.line]
47/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
47/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
47/3:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
47/4:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
47/5:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
47/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
47/7:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
47/8:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(5684,5685)
48/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
48/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
48/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
48/4:
def get_lines(thisrun):
    lines = []
    for i, thisline in enumerate(thisrun.line):
        lines.append(thisline)
    return lines
48/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
48/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
48/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
48/8: major_krs
48/9:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
48/10:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.line
48/11:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.line[1]
48/12:
# NLTEfalc_majorlines[2].__dict__
runNLTEfalc.line[major_krs]
48/13:
def get_lines(thisrun, krs):
    lines = []
    for i, thisline in enumerate(thisrun.line[krs]):
        lines.append(thisline)
    return lines
48/14:
NLTEfalc_majorlines = get_lines(runNLTEfalc)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
48/15:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
48/16:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
48/17:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230)
48/18:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)
48/19:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
48/20:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(5684,5685)
49/1: line
49/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
49/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
49/4:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
49/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
49/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
49/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
49/8: major_krs
49/9:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])
49/10:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)
49/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/12:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')

fig2.legend()

ax2.set_xlim(5684,5685)
49/13: line
49/14: LTEfalc_majorlines[1]
49/15: LTEfalc_majorlines[1].weq
49/16: LTEfalc_majorlines[1].calc_weq
49/17: LTEfalc_majorlines[1].weq
49/18: LTEfalc_majorlines[1].weq(angle=1)
49/19: LTEfalc_majorlines[1].weq(angle=0)
49/20: LTEfalc_majorlines[1].weq
49/21:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

ax[0].legend()

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/22:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


ax[i].legend() for i in range(len(ax))

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/23:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/24:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/25:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: Eqw={thisline.weq} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/26:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: Eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE falc')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='LTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label='NLTE BICH')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='LTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label='NLTE stagger')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
49/27:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
50/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
50/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
50/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
50/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
50/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
50/6:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
50/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

# runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
50/8:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

# runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
50/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


# LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
50/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(NLTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
50/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(LTEmarcs_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
50/12:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
50/13:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
50/14:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
50/15:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')

fig2.legend()

ax2.set_xlim(5684,5685)
50/16: 3DNLTE
50/17: NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
50/18: NLTE3d_eqws
50/19:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]
50/20:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE3d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - NLTE1d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE1d_eqws
51/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
51/2:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ', linesstyle=='.-')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
51/3:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ', linesstyle='.-')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
51/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
51/5:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
51/6:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
51/7:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
51/8:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
51/9:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
51/10:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
51/11:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
51/12:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ', linesstyle='.-')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
51/13:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
52/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
52/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
52/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
52/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
52/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
52/6:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
52/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
52/8:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
52/9:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ', linesstyle='.-')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
54/1:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
54/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
54/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
54/4:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
54/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
54/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
54/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
54/8:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
54/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
54/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
54/11:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')

fig2.legend()

ax2.set_xlim(5684,5685)
54/12:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE3d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - NLTE1d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE1d_eqws
55/1:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
55/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
55/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
55/4:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
55/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
55/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
55/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
55/8:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

# runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
55/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

# LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
55/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

# for i, thisline in enumerate(LTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
55/11:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')

fig2.legend()

ax2.set_xlim(5684,5685)
55/12:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE3d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - NLTE1d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE1d_eqws
55/13: print(NLTEfalc_majorlines.wav)
55/14: print(NLTEfalc_majorlines[1].wav)
55/15: print(NLTEfalc_majorlines[1].q)
55/16: print(NLTEfalc_majorlines[1]._dict__)
55/17: print(NLTEfalc_majorlines[1].__dict__)
55/18: runNLTEfalc[1]
55/19: runNLTEfalc.line[1]
55/20: runNLTEfalc.line[1].__dict__
55/21: runNLTEfalc.line.__dict__
55/22: print(NLTEfalc_majorlines[1].lam0
55/23: print(NLTEfalc_majorlines[1].lam0)
55/24: print(NLTEfalc_majorlines[1].lambda0)
55/25:
print(NLTEfalc_majorlines[1].lambda0)
print(NLTEfalc_majorlines[1].lam0)
55/26:
print(NLTEfalc_majorlines[1].lambda0)
print(NLTEfalc_majorlines[1].lam0)
print(NLTEfalc_majorlines[1].alam)
55/27:
print(NLTEfalc_majorlines[1].lambda0)
print(NLTEfalc_majorlines[1].lam0)
print(NLTEfalc_majorlines[1].alamb)
55/28:
print(NLTEfalc_majorlines[1].lambda0)
print(NLTEfalc_majorlines[1].lam0)
55/29:
print(NLTEfalc_majorlines[:].lambda0)
# print(NLTEfalc_majorlines[1].lam0)
55/30: runNLTEfalc.line.
55/31:
print(NLTEfalc_majorlines[:].lambda0)

[line.lambda0 for line in NLTEfalc_majorlines]
55/32:
print(NLTEfalc_majorlines[:].lambda0)

[line for line in NLTEfalc_majorlines]
55/33:
#print(NLTEfalc_majorlines[:].lambda0)

[line.lambda0 for line in NLTEfalc_majorlines]
55/34:

[line.lambda0:.2f for line in NLTEfalc_majorlines]
55/35:

[line.lambda0 for line in NLTEfalc_majorlines]
55/36:

print(f'{[line.lambda0 for line in NLTEfalc_majorlines]}'
55/37:

print(f'{[line.lambda0 for line in NLTEfalc_majorlines]}')
55/38:

print(f'{[line.lambda0 for line in NLTEfalc_majorlines]}:.2f')
55/39:

print(f'{[line.lambda0 for line in NLTEfalc_majorlines]}':.2f)
55/40:

f'{[line.lambda0 for line in NLTEfalc_majorlines]}'
55/41:

f'{[line.lambda0:.2f for line in NLTEfalc_majorlines]}'
55/42:
major_line_wavelengths = [line.lambda0:.2f for line in NLTEfalc_majorlines]
f'{major_line_wavelengths:.2f}'
55/43:
major_line_wavelengths = [line.lambda0:.2f for line in NLTEfalc_majorlines]
f'{major_line_wavelengths}'
55/44:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
f'{major_line_wavelengths}'
55/45:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
f'{major_line_wavelengths:.2f}'
55/46:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
print(f'{major_line_wavelengths:.2f}')
55/47:
major_line_wavelengths = [round(line.lambda0,2) for line in NLTEfalc_majorlines]
print(f'{major_line_wavelengths:.2f}')
55/48: major_line_wavelengths = [round(line.lambda0,2) for line in NLTEfalc_majorlines]
55/49:
major_line_wavelengths = [round(line.lambda0,2) for line in NLTEfalc_majorlines]
major_line_wavelengths
55/50:
major_line_wavelengths = [round(line.lambda0) for line in NLTEfalc_majorlines]
major_line_wavelengths
55/51:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
print(major_line_wavelengths)
print('\n wef')
55/52:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
print(major_line_wavelengths)
print('\n' round(major_line_wavelengths, 2)
55/53:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
print(major_line_wavelengths)
print('\n' ,round(major_line_wavelengths, 2)
55/54:
major_line_wavelengths = [line.lambda0 for line in NLTEfalc_majorlines]
print(major_line_wavelengths)
print('\n' ,round(major_line_wavelengths, 2))
55/55: major_line_wavelengths = [round(line.lambda0,3) for line in NLTEfalc_majorlines]
55/56:
major_line_wavelengths = [round(line.lambda0,3) for line in NLTEfalc_majorlines]
major_line_wavelengths
55/57:
major_line_wavelengths = [round(line.lambda0,3) for line in NLTEfalc_majorlines]
print(major_line_wavelengths)
56/1:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import matplotlib.pyplot as plt
56/2:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
sav_fname = pjoin('iag_sun.sav')
sav_data = readsav(sav_fname)
56/3: print(sav_data.keys())
56/4: sav_data['iag_sun']
56/5:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(6298, 6302)
56/6: sav_data['iag_sun'].wave[0].shape
55/58:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws - LTE3d_eqws)
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - NLTE1d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE1d_eqws
55/59:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - NLTE1d_eqws
eqw_NLTE3d_diff_LTE3d_eqws = NLTE3d_eqws - LTE1d_eqws
55/60:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
55/61:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
55/62:
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths
55/63:
fig_wave, ax_wave = plt.subplots(1, 1, figsize=(25,30))
# 3D NLTE vs 1D LTE
ax_wave.plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/64:
fig_wave, ax_wave = plt.subplots(1, 1, figsize=(5,10))
# 3D NLTE vs 1D LTE
ax_wave.plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/65:
fig_wave, ax_wave = plt.subplots(1, 1, figsize=(10,5))
# 3D NLTE vs 1D LTE
ax_wave.plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/66:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(10,5))
# 3D NLTE vs 1D LTE
ax_wave[0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/67:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(10,5))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/68:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/69:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, linestyle='.')
55/70:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, linestyle='-')
55/71:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, linestyle='dotted')
55/72:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].scatter(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, linestyle='dotted')
55/73:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].scatter(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws)
55/74: help(plt.scatter)
55/75:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, linestyle='-o')
55/76:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, marker='-o')
55/77:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, markers='-o')
55/78:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
55/79:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
55/80:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o', xlabel='Aa')
55/81:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('d')
55/82:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('d');
55/83:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
55/84:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o', title='sddf')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
55/85:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw')
55/86:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å);
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw')
55/87:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw')
55/88: LTEstag55230_majorlines[1]
55/89: LTEstag55230_majorlines[1].__dict__
55/90: # LTEstag55230_majorlines[1].__dict__
55/91:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,2) for line in LTEstag55230_majorlines]
55/92:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,2) for line in LTEstag55230_majorlines]
major_line_f_vals
55/93:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals
55/94:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = [round(l,4) for line in LTEstag55230_majorlines]
55/95:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = [round(l,4) for line in LTEstag55230_majorlines]
55/96: LTEstag55230_majorlines[1].__dict__
55/97:
runLTEfalc.ev
# [run.line[kr].i]
55/98: runLTEfalc.ev[runLTEfalc.line[major_krs].i]
55/99: major_krs
55/100: runLTEmarcs.ev[runLTEfalc]
55/101: runLTEmarcs.ev
55/102: runLTEmarcs.ev[286]
55/103: runLTEfalc.ev[286]
55/104:
major_line_i = [runLTEfalc]
runLTEfalc.ev[LTEstag55230_majorlines.i]
55/105:
major_line_i = [runLTEfalc]
runLTEfalc.ev[line.i for line in LTEstag55230_majorlines]
55/106:
major_line_i = [runLTEfalc]
runLTEfalc.ev[[line.i for line in LTEstag55230_majorlines]]
55/107: runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]]
55/108: runLTEfalc.ev[[line.i for line in LTEstag55230_majorlines]]
55/109: runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]]
55/110:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]]
55/111: major_line_lower_energylevels
55/112: round(major_line_lower_energylevels, ,4
55/113: round(major_line_lower_energylevels, ,4)
55/114: round(major_line_lower_energylevels, 4)
55/115: major_line_lower_energylevels.round(decimals=3)
55/116:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)
55/117: major_line_lower_energylevels
55/118:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eqw');
55/119:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('f, cm-1');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');
55/120:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, '-o')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');
55/121:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');
55/122:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

plt.tight_layout()
55/123:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'o')
ax_wave[2,0].set_xlabel('Low energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

plt.tight_layout()
55/124:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

plt.tight_layout()
55/125:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width, Å');
ax_wave[1,1].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width, Å');
ax_wave[2,1].set_title('3D NLTE - 1D LTE eqw');

plt.tight_layout()
55/126:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

plt.tight_layout()
55/127:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

plt.tight_layout()
55/128:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

plt.tight_layout()
plt.savefig('si_plot.pdf')
55/129:
fig_wave, ax_wave = plt.subplots(3, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

plt.tight_layout()
plt.savefig('si_plot.pdf')
55/130:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
55/131:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
55/132:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
55/133:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
55/134:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
55/135:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
55/136:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
55/137:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
55/138:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
55/139:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
55/140:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684,5685)
55/141:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
55/142: LTEstag55230_majorlines.__dict__
55/143: LTEstag55230_majorlines[0].__dict__
55/144: LTEstag55230_majorlines[0].lam0
55/145: LTEstag55230_majorlines[0].__dict__
55/146:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)
55/147:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

plt.tight_layout()
plt.savefig('si_plot.pdf')
55/148:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('upper energy, cm-1');
ax_wave[3,0].set_ylabel('Equivalent width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('upper energy, cm-1');
ax_wave[3,1].set_ylabel('Equivalent width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('upper energy, cm-1');
ax_wave[3,2].set_ylabel('Equivalent width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D LTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/149:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('upper energy, cm-1');
ax_wave[3,0].set_ylabel('Equivalent width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('upper energy, cm-1');
ax_wave[3,1].set_ylabel('Equivalent width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_upper_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('upper energy, cm-1');
ax_wave[3,2].set_ylabel('Equivalent width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/150:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# lower energy levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition energy difference
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
55/151:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, cm-1');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, cm-1');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition energy difference , cm-1');
ax_wave[3,0].set_ylabel('Equivalent width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, cm-1');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, cm-1');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition energy difference, cm-1');
ax_wave[3,1].set_ylabel('Equivalent width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, cm-1');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, cm-1');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition energy difference, cm-1');
ax_wave[3,2].set_ylabel('Equivalent width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/152:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Equivalent width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Equivalent width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Equivalent width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition energy difference , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Equivalent width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Equivalent width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Equivalent width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Equivalent width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Equivalent width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Equivalent width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Equivalent width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Equivalent width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Equivalent width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/153:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition energy difference , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/154:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(25,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition energy difference , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/155:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition energy difference , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition energy difference, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/156:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eqw');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$ , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eqw');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eqw');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eqw');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eqw');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eqw');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/157:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$ , $cm^{-1}$');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eq. width');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, $cm^{-1}$');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, $cm^{-1}$');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, $cm^{-1}$');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/158:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('lower energy, eV');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eq. width');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('lower energy, eV');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('lower energy, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/159: help(plt.scatter)
55/160:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy level, eV');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eq. width');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy level, eV');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D NLTE eq. width');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D NLTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/161:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy level, eV');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eq. width');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy level, eV');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
55/162:
LTEstag55230_majorlines[0].__dict__
major_line_lower_energylevels
55/163:
LTEstag55230_majorlines[0].__dict__
major_line_upper_energylevels
major_line_lower_energylevels
55/164:
LTEstag55230_majorlines[0].__dict__
print(major_line_upper_energylevels)
print(major_line_lower_energylevels)
55/165:
LTEstag55230_majorlines[0].__dict__
print(major_line_upper_energylevels)
print(major_line_lower_energylevels)
print(major_line_energydiffs)
57/1:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_NLTE3d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(LTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE1d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
57/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
57/4:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
57/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
57/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
57/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
57/8:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
57/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
57/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
57/11:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
57/12:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_NLTE3d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(LTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE1d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/13:
LTEstag55230_majorlines[0].__dict__
print(major_line_upper_energylevels)
print(major_line_lower_energylevels)
print(major_line_energydiffs)
57/14: major_line_lower_energylevels
57/15:
fig_wave, ax_wave = plt.subplots(4, 3, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[1,0].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('f, $cm^{-1}$');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[2,0].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Low energy level, eV');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[3,0].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[3,0].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,0].set_ylabel('Eq. width difference, Å');
ax_wave[3,0].set_title('3D NLTE - 1D LTE eq. width');

# 3D NLTE vs 1D NLTE
ax_wave[0,1].plot(major_line_wavelengths, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('Centre wavelength, Å');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[2,1].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('Low energy level, eV');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

ax_wave[3,1].plot(major_line_energydiffs, eqw_NLTE3d_diff_NLTE1d_eqws, 'x')
ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,1].set_ylabel('Eq. width difference, Å');
ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# 3D NLTE vs 3D LTE
ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[0,2].set_xlabel('Centre wavelength, Å');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('3D NLTE - 3D LTE eq. width');

ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE3d_eqws, 'x')
ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
ax_wave[3,2].set_ylabel('Eq. width difference, Å');
ax_wave[3,2].set_title('3D NLTE - 3D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/16:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_LTE3d_diff_LTE1d_eqws = np.subtract(LTE3d_eqws, LTE1d_eqws)
eqw_NLTE1d_diff_LTE1d_eqws = np.subtract(NLTE1d_eqws, LTE1d_eqws)

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/17:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(20,15))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width difference, Å');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# # 3D LTE vs 1D NLTE
# ax_wave[0,1].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[0,1].set_xlabel('Centre wavelength, Å');
# ax_wave[0,1].set_ylabel('Eq. width difference, Å');
# ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,1].set_ylabel('Eq. width difference, Å');
# ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[2,1].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[2,1].set_xlabel('Low energy level, eV');
# ax_wave[2,1].set_ylabel('Eq. width difference, Å');
# ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[3,1].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,1].set_ylabel('Eq. width difference, Å');
# ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# # 1D NLTE vs 3D LTE
# ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[0,2].set_xlabel('Centre wavelength, Å');
# ax_wave[0,2].set_ylabel('Eq. width difference, Å');
# ax_wave[0,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,2].set_ylabel('Eq. width difference, Å');
# ax_wave[1,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[2,2].set_xlabel('Low energy level, eV');
# ax_wave[2,2].set_ylabel('Eq. width difference, Å');
# ax_wave[2,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,2].set_ylabel('Eq. width difference, Å');
# ax_wave[3,2].set_title('3D NLTE - 3D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/18:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,20))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width difference, Å');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# # 3D LTE vs 1D NLTE
# ax_wave[0,1].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[0,1].set_xlabel('Centre wavelength, Å');
# ax_wave[0,1].set_ylabel('Eq. width difference, Å');
# ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,1].set_ylabel('Eq. width difference, Å');
# ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[2,1].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[2,1].set_xlabel('Low energy level, eV');
# ax_wave[2,1].set_ylabel('Eq. width difference, Å');
# ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[3,1].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,1].set_ylabel('Eq. width difference, Å');
# ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# # 1D NLTE vs 3D LTE
# ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[0,2].set_xlabel('Centre wavelength, Å');
# ax_wave[0,2].set_ylabel('Eq. width difference, Å');
# ax_wave[0,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,2].set_ylabel('Eq. width difference, Å');
# ax_wave[1,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[2,2].set_xlabel('Low energy level, eV');
# ax_wave[2,2].set_ylabel('Eq. width difference, Å');
# ax_wave[2,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,2].set_ylabel('Eq. width difference, Å');
# ax_wave[3,2].set_title('3D NLTE - 3D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/19:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))
# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width difference, Å');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# # 3D LTE vs 1D NLTE
# ax_wave[0,1].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[0,1].set_xlabel('Centre wavelength, Å');
# ax_wave[0,1].set_ylabel('Eq. width difference, Å');
# ax_wave[0,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,1].set_ylabel('Eq. width difference, Å');
# ax_wave[1,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[2,1].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[2,1].set_xlabel('Low energy level, eV');
# ax_wave[2,1].set_ylabel('Eq. width difference, Å');
# ax_wave[2,1].set_title('3D NLTE - 1D NLTE eq. width');

# ax_wave[3,1].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
# ax_wave[3,1].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,1].set_ylabel('Eq. width difference, Å');
# ax_wave[3,1].set_title('3D NLTE - 1D NLTE eq. width');


# # 1D NLTE vs 3D LTE
# ax_wave[0,2].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[0,2].set_xlabel('Centre wavelength, Å');
# ax_wave[0,2].set_ylabel('Eq. width difference, Å');
# ax_wave[0,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[1,2].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[1,2].set_xlabel('f, $cm^{-1}$');
# ax_wave[1,2].set_ylabel('Eq. width difference, Å');
# ax_wave[1,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[2,2].set_xlabel('Low energy level, eV');
# ax_wave[2,2].set_ylabel('Eq. width difference, Å');
# ax_wave[2,2].set_title('3D NLTE - 3D LTE eq. width');

# ax_wave[3,2].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
# ax_wave[3,2].set_xlabel('Transition $\Delta E$, eV');
# ax_wave[3,2].set_ylabel('Eq. width difference, Å');
# ax_wave[3,2].set_title('3D NLTE - 3D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/20:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width difference, Å');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width difference, Å');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width difference, Å');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/21:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.subtract(NLTE3d_eqws, LTE1d_eqws), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.subtract(LTE3d_eqws, LTE1d_eqws), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.subtract(NLTE1d_eqws, LTE1d_eqws), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/22:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width difference, Å');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width difference, Å');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width difference, Å');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width difference, Å');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width difference, Å');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width difference, Å');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width difference, Å');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width difference, Å');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width difference, Å');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width difference, Å');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width difference, Å');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width difference, Å');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/23:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
57/24:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.abs((np.subtract(NLTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs((np.subtract(LTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs((np.subtract(NLTE1d_eqws, LTE1d_eqws), LTE1d_eqws))*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/25:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws), LTE1d_eqws))*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/26:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws), LTE1d_eqws))*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws), LTE1d_eqws))*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/27:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
57/28:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/1:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[0,3].invert_xaxis()

plt.tight_layout()
plt.savefig('si_plot.pdf')
58/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
58/3:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
58/4:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
58/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
58/6:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
58/7:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
58/8:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
58/9:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
58/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.weq:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.weq:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.weq:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.weq:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.weq:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.weq:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
58/11:
fig2, ax2 = plt.subplots(figsize=(20,7))
LTEfalc_majorlines[1].plot(label='LTE falc')
NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
58/12:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences
# eqw_NLTE3d_diff_LTE3d_eqws = np.subtract(NLTE3d_eqws, LTE3d_eqws)
# eqw_NLTE3d_diff_NLTE1d_eqws = np.subtract(NLTE3d_eqws, NLTE1d_eqws)
# eqw_NLTE3d_diff_LTE1d_eqws = np.subtract(NLTE3d_eqws, LTE1d_eqws)
eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/13:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');

# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');


# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[0,3].invert_xaxis()

plt.tight_layout()
plt.savefig('si_plot.pdf')
58/14: help(plt.scatter)
58/15:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()


ax_wave[0,3].invert_xaxis()

plt.tight_layout()
plt.savefig('si_plot.pdf')
58/16:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()


ax_wave[0,3].invert_xaxis()

plt.tight_layout()
plt.savefig('si_plot.pdf')
58/17:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/18:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi 

print(major_line_wavelengths)
58/19:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, MeV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, MeV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, MeV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, MeV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, MeV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, MeV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/20:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 0.0124MeV

print(major_line_wavelengths)

print(f'Multi wavelengths (Å) to MeV: {major_line_wavelengths * 0.0124}')
58/21:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 0.0124MeV

print(major_line_wavelengths)

print(f'Multi wavelengths (Å) to MeV: {np.array(major_line_wavelengths) * 0.0124}')
58/22:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/23:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/0.0124eV

print(major_line_wavelengths)

print(f'Multi wavelengths (Å) to eV: {np.array(major_line_wavelengths) / 0.0124}')
58/24:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/0.0124eV

print(major_line_wavelengths)

print(f'Multi wavelengths (Å) to eV: {np.array(major_line_wavelengths) / 12398}')
58/25:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/0.0124eV

print(major_line_wavelengths)

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')
58/26:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/0.0124eV

print(f' Multi wavelengths: {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')
58/27:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')
58/28:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.plot(major_line_wavelengths, np.subtract(major_line_energydiffs, (np.divide(12398 ,major_line_wavelengths))))
58/29:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.plot(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/30:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/31:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lam0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/32:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/33:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/34:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/35:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/36:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths) }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/37:
# 6th line (5794.68Å) has wrong? transition energy 
LTEmarcs_majorlines[5].__dict__
58/38:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths):.3f }')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/39:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {round(np.divide(12398 ,major_line_wavelengths), 3)}')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/40:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths), 3}')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/41:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[5].__dict__
58/42:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[6].__dict__
58/43:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].__dict__
58/44:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].lam0
58/45:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].lambda0
58/46:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].__dict__
58/47:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].__dict__

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {58311.660 - 40991.883}cm-1')
58/48:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].__dict__

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1')
58/49:
# 5th line (5773.75Å) has wrong? transition energy 
LTEmarcs_majorlines[4].__dict__

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
58/50: LTEmarcs_majorlines[4].__dict__
58/51:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'{runLTEmarcs.ev[10]}')
58/52:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[10]},   eV acc. level 56: {runLTEmarcs.ev[56]}')
58/53:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660    to 40991.883 cm-1 ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[10]},   eV acc. level 56: {runLTEmarcs.ev[56]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/54:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[0]},   eV acc. level 56: {runLTEmarcs.ev[56]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/55:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[10]},   eV acc. level 56: {runLTEmarcs.ev[56]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/56:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[11]},   eV acc. level 56: {runLTEmarcs.ev[56]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/57:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[9]},   eV acc. level 56: {runLTEmarcs.ev[56]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/58:
# 5th line (5773.75Å) has wrong? transition energy 

# transition from 56 to 10
# acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
print(f'eV acc. level 10: {runLTEmarcs.ev[9]},   eV acc. level 56: {runLTEmarcs.ev[55]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
58/59:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[[line.i for line in LTEstag55230_majorlines]-1], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]-1], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/60:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.i for line in LTEstag55230_majorlines],1)], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[[line.j for line in LTEstag55230_majorlines]-1], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/61:
# equivalent widths for the major lines
NLTE3d_eqws = [line.weq for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.weq for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.weq for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.weq for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.i for line in LTEstag55230_majorlines],1)], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.j for line in LTEstag55230_majorlines],1)], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
58/62:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(15,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/63:
# Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

print(f' Multi wavelengths (Å): {major_line_wavelengths}')

print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths), 3}')

print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))
58/64:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(20,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/65:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(17.5,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
58/66:
fig2, ax2 = plt.subplots(figsize=(20,7))
# LTEfalc_majorlines[1].plot(label='LTE falc')
# NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
# LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
58/67:
fig2, ax2 = plt.subplots(figsize=(20,7))
# LTEfalc_majorlines[1].plot(label='LTE falc')
# NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
# LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
plt.savefig('si_line_ex.pdf')
59/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
61/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
61/2:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
61/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
61/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
61/5:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
62/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
62/2:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [thisrunobj.line for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
62/3:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [thisrunobj.line for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
63/2:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
63/3:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [thisrunobj.line for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/4:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

# for i, runlines in enumerate(linesobj):
63/5:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

for i, runlines in enumerate(linesobj):
    
    for j, thisline in enumerate(runlines):
        plt.sca(ax[j])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
63/6:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/8:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

for i, runlines in enumerate(linesobj):
    
    for j, thisline in enumerate(runlines):
        plt.sca(ax[j])
        thisline.plot(label=f'LTE falc: eqw={thisline.weq:.2f} ')
63/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
63/10:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/11:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)

fig.
63/12:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(25,30))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)
63/13:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,10))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)
63/14:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,14))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)
63/15:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,14))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)

plt.tight_layout()
63/16:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,14))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)

plt.tight_layout()
63/17:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)

plt.tight_layout()
63/18: eq_widths = [[thisline.weq for thisline in lines] for lines in linesobj]
63/19: eq_widths
63/20: eq_widths.shape
63/21: np.shape(eq_widths)
63/22: fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))
63/23: eq_widths.rows
63/24: eq_widths.row
63/25: np.array(eq_widths)
63/26:
np.array(eq_widths)
plt.plot(np.array(eq_widths))
63/27:
np.array(eq_widths)
plt.plot(np.array(eq_widths).T)
63/28: eq_widths = np.array([[thisline.weq for thisline in lines] for lines in linesobj])
63/29: plt.plot(eq_widths.T)
63/30: eq_widths = np.array([[thisline.weq for thisline in lines] for lines in linesobj])
63/31: eq_widths.row
63/32: eq_widths[:]
63/33: eq_widths[,:]
63/34: eq_widths[0,:]
63/35:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/36: eq_widths[0,:]
63/37:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in (major_krs):
    ax_ew[i].plot(abundances, eq_widths[i, :])

plt.tight_layout()
63/38:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in (len(major_krs)):
    ax_ew[i].plot(abundances, eq_widths[i, :])

plt.tight_layout()
63/39: len(major_krs)
63/40: major_krs
63/41:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in (linesobj):
    ax_ew[i].plot(abundances, eq_widths[i, :])

plt.tight_layout()
63/42:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in linesobj:
    ax_ew[i].plot(abundances, eq_widths[i, :])

plt.tight_layout()
63/43:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[i, :])

plt.tight_layout()
63/44: eq_widths[:,0]
63/45:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i])

plt.tight_layout()
63/46:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].scactter(abundances, eq_widths[:,i])

plt.tight_layout()
63/47:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].scatter(abundances, eq_widths[:,i])

plt.tight_layout()
63/48:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'o')

plt.tight_layout()
63/49:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')

plt.tight_layout()
63/50:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')
    ax[i].legend(labels)

plt.tight_layout()
63/51:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')
    ax[i].legend(labels)

plt.tight_layout()
63/52:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(linesobj):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')
    #ax[i].legend(labels)

plt.tight_layout()
63/53:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')
    #ax[i].legend(labels)

plt.tight_layout()
63/54:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances, eq_widths[:,i], 'x')
    ax[i].legend(labels)

plt.tight_layout()
63/55:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances, eq_widths[:-1,i], 'x')
    ax[i].legend(labels)

plt.tight_layout()
63/56:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')
    ax[i].legend(labels)

plt.tight_layout()
63/57:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')

    ax_ew[i].legend(labels)

plt.tight_layout()
63/58:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx')

    ax_ew[i].legend('1D LTE', '3D NLTE')

plt.tight_layout()
63/59:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')
    #ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx')

    ax_ew[i].legend('1D LTE', '3D NLTE')

plt.tight_layout()
63/60:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x')
    #ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'x')

    ax_ew[i].legend('1D LTE', '3D NLTE')

plt.tight_layout()
63/61:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'x', label='3D NLTE')

    ax_ew[i].legend()

plt.tight_layout()
63/62:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')

    ax_ew[i].legend()

plt.tight_layout()
63/63:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(linesobj[i].lam0)

    ax_ew[i].legend()

plt.tight_layout()
63/64: linesobj[i]
63/65:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
wavelengths = [line.lam0 for line in linesobj]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
63/66: wavelengths = [line.lambda0 for line in linesobj]
63/67: wavelengths = [line[0].lambda0 for line in linesobj]
63/68: wavelengths
64/1:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
64/2: wavelengths = [line[].lambda0 for line in linesobj]
64/3: wavelengths
64/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
64/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
64/6:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
64/7: wavelengths = [line[].lambda0 for line in linesobj]
64/8: wavelengths = [line.lambda0[0] for line in linesobj]
64/9: wavelengths = [line.lambda0 for line in linesobj[0]]
64/10: wavelengths
64/11:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        ax[j].legend(labels)

plt.tight_layout()
64/12: eq_widths = np.array([[thisline.weq for thisline in lines] for lines in linesobj])
64/13: eq_widths[:,0]
64/14:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(linesobj[i].lam0)

    ax_ew[i].legend()

plt.tight_layout()
64/15:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(wavelengths[i])

    ax_ew[i].legend()

plt.tight_layout()
64/16:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'{wavelengths[i]:.2f} Å')

    ax_ew[i].legend()

plt.tight_layout()
64/17:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], 'x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')

    ax_ew[i].legend()

plt.tight_layout()
64/18:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '-x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')

    ax_ew[i].legend()

plt.tight_layout()
64/19:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')

    ax_ew[i].legend()

plt.tight_layout()
64/20:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
64/21:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        #thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        plt.plot(thisline.q, thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
64/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        #thisline.plot()#label=f'LTE falc: eqw={thisline.weq:.2f} ')
        plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
64/23:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
64/24: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
64/25:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
64/26:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot()#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
64/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
65/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
65/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
65/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
65/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
65/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
65/6:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
65/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
65/8:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
65/9:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.qmax=3.5:.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.qmax=3.5:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.qmax=3.5:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.qmax=3.5:.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.qmax=3.5:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.qmax=3.5:.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.qmax=3.5:.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.qmax=3.5:.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.qmax=3.5:.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.qmax=3.5:.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
65/10:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'LTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(label=f'NLTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'LTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(label=f'NLTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
65/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'LTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')


[ax[i].legend() for i in range(len(ax))]

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
65/12:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'LTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')


[ax[i].legend() for i in range(len(ax))]
plt.tight_layout()

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
65/13:
# equivalent widths for the major lines
NLTE3d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.calc_weq(qmax=3.5) for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.calc_weq(qmax=3.5) for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.i for line in LTEstag55230_majorlines],1)], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.j for line in LTEstag55230_majorlines],1)], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
65/14:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(17.5,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
66/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
66/2:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
66/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
66/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
66/5:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
66/6:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
66/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
66/8: wavelengths = [line.lambda0 for line in linesobj[0]]
66/9: wavelengths
66/10:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
66/11: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
66/12:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
66/13: test_cog = cog
66/14: test_cog = CoG(runs=runfiles)
66/15: runfiles2 = ['runs/Si_marcsLTE776/', 'runs/Si_marcs_LTE_run/', 'runs/Si_marcsLTE736/', 'runs/Si_stag_NLTE_5x5x230_run/']
66/16: test_cog = CoG(runs=runfiles2)
66/17: runfiles2 = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
66/18: test_cog = CoG(runs=runfiles2)
66/19: runfiles2 = [runs/Si_marcsLTE776/output/, runs/Si_marcs_LTE_run/output/, runs/Si_marcsLTE736/output/, runs/Si_stag_NLTE_5x5x230_run/output/]
66/20: runfiles2 = ['runs/Si_marcsLTE776/', 'runs/Si_marcs_LTE_run/', 'runs/Si_marcsLTE736/', 'runs/Si_stag_NLTE_5x5x230_run/']
66/21: test_cog = CoG(runs=runfiles2)
66/22: test_cog = CoG(runs=runobjects)
66/23: test_cog.plot
66/24: test_cog.plot_profiles
66/25: test_cog = CoG(runs=runfiles2)
66/26: LTE_runs = ['runs/Si_marcs_LTE_dir/]
66/27: LTE_runs = 'runs/Si_marcs_LTE_dir/'
66/28: test_cog = CoG(runs=LTE_runs)
66/29: test_cog.plot
66/30: test_cog.plot(286)
66/31: test_cog.plot([286])
66/32: test_cog.plot(286)
66/33: test_cog = CoG(runs=LTE_runs, lines=major_krs)
66/34: test_cog.plot(286)
66/35: test_cog.plot(286, marker='x')
66/36: test_cog.plot(286, marker='x', smooth=False)
66/37: test_cog.plot(286, marker='x', interp=False)
66/38: test_cog.abnds_corr(runobjects[3], 286)
66/39: test_cog.abnds_corr(runobjects[3], 286, qmax=3.5)
66/40:
test_cog.abnds_corr(runobjects[3], 286, qmax=3.5)
test_cog.abnds_corr(runobjects[3], 293, qmax=3.5)
66/41: LTE_runs = 'runs/Si_marcs_LTE_dir/'
66/42: test_cog = CoG(runs=LTE_runs, lines=major_krs)
67/1: LTE_runs = 'runs/Si_marcs_LTE_dir/'
67/2: test_cog = CoG(runs=LTE_runs, lines=major_krs)
67/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
67/5:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
67/6: LTE_runs = 'runs/Si_marcs_LTE_dir/'
67/7: test_cog = CoG(runs=LTE_runs, lines=major_krs)
67/8: test_cog.plot(286, marker='x', interp=False)
67/9:
test_cog.abnds_corr(runobjects[3], 286, qmax=3.5)
test_cog.abnds_corr(runobjects[3], 293, qmax=3.5)
67/10:
NLTE_obj = runobjects[3]
test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/11:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for kr in major_krs]
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/13:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1)

for i, thiskr in enumerate(major_krs):
    test_cog.plot(thiskr, marker='x', interp=False)
67/14:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1)

for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])
    test_cog.plot(thiskr, marker='x', interp=False)
67/15:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1)

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
67/16:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
67/17:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
plt.tight_layout
67/18:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
plt.tight_layout()
67/19: wavelengths = [line.lambda0 for line in linesobj[0]]
67/20: wavelengths
67/21:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
67/22: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
67/23:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
67/24: LTE_runs = 'runs/Si_marcs_LTE_dir/'
67/25:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
plt.tight_layout()
67/26:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False)
plt.tight_layout()
67/27:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
plt.tight_layout()
67/28:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
plt.tight_layout()
67/29:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(f'{wavelengths}')
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/30:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(f'Wavev{wavelengths.T}')
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/31:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(wavelengths, corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/32:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)
67/33:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/34:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
from /lustre/astro/ngray/ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/35:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
from lustre/astro/ngray/ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/36:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/37:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/38:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
# sys.path.append('../External_Functions')
# from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/39:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/40:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../External_Functions.py')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/41:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/42:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
sys.path.append('../../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure


%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/43:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
67/44:
sys.path.append('../External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
67/45:
sys.path.append('External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
67/46:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
67/47:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
67/48:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance corrections': corrections,

}
67/49:

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')

text = nice_string_output(d, extra_spacing=2, decimals=3)
add_text_to_ax(0.02, 0.95, text, ax_ab, fontsize=12)

plt.tight_layout()
67/50:

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')

text = nice_string_output(d, extra_spacing=2, decimals=3)
add_text_to_ax(0.02, 0.95, text, ax, fontsize=12)

plt.tight_layout()
67/51:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    text = str(corrections[i])
    add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)



plt.tight_layout()
67/52:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    text = str(corrections[i])
    print(text)
    add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)



plt.tight_layout()
67/53:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    text = str(corrections[i])
    print(text)
    add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/54:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    thistext = str(corrections[i])
    print(thistext)
    ax_ab[i].text(0.02, 0.95, thistext)
    # add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


# add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/55:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    thistext = str(corrections[i])
    print(thistext)
    ax_ab[i].text(0.2, 0.95, thistext)
    # add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


# add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/56:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    thistext = str(corrections[i])
    print(thistext)
    ax_ab[i].text(thistext)
    # add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


# add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/57:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    thistext = str(corrections[i])
    print(thistext)
    ax_ab[i].text(0.5,0.5, thistext)
    # add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


# add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/58:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    thistext = str(corrections[i])
    print(thistext)
    # ax_ab[i].text(0.5,0.5, thistext)
    # add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)


# add_text_to_ax(0.02, 0.95, text, ax[i], fontsize=12)
plt.tight_layout()
67/59:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')


plt.tight_layout()
67/60: ax_ab[1].title
67/61: ax_ab[1].title + 'test'
67/62: ax_ab[1].title + text('test')
67/63: ax_ab[1].title + Text('test')
67/64: ax_ab[1].title +'test'
67/65: d
67/66: d.Abundance corrections
67/67:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
67/68: d
67/69: d.Abundance_cor
67/70: d[Abundance_cor]
67/71: d['Abundance_cor']
67/72: d['Abundance_cor'][1]
67/73:
def ax_text(x, ax, posx, posy, color='k'):
    
    d = {'Entries': len(x), 
         'Mean': x.mean(),
         'STD': x.std(ddof=1),
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=12, color=color)
    return None
67/74:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'Abundance_cor': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=12, color=color)
    return None
67/75:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.04, 0.25)


plt.tight_layout()
67/76:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'Abundance correction: ': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=12, color=color)
    return None
67/77:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.04, 0.25)


plt.tight_layout()
67/78:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.4, 0.25)


plt.tight_layout()
67/79:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'Abundance correction: ': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
67/80:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5)
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.4, 0.25)


plt.tight_layout()
67/81:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.4, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
67/82:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.5, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
67/83:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
67/84:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.5, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
67/85:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.65, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
67/86:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.6, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
68/1:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import matplotlib.pyplot as plt
68/2:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
# sav_fname = pjoin('iag_sun.sav')
# sav_data = readsav(sav_fname)
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
68/3: print(sav_data.keys())
68/4: sav_data['iag_sun']
68/5:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(6298, 6302)
68/6:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
# plt.xlim(6298, 6302)
68/7:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
# plt.xlim(5640,5650)
68/8:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5640,5650)
68/9:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5645,5646)
68/10:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5645.2,5646)
69/1:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5645.2,5646)
69/2:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import matplotlib.pyplot as plt
69/3:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
# sav_fname = pjoin('iag_sun.sav')
# sav_data = readsav(sav_fname)
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
69/4: print(sav_data.keys())
69/5: sav_data['iag_sun']
69/6:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5645.2,5646)
69/7: sav_data['iag_sun'].wave[0].shape
70/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
70/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
70/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
70/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
70/5: wavelengths = [line.lambda0 for line in linesobj[0]]
70/6: wavelengths
70/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
70/8: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
70/9:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
70/10: LTE_runs = 'runs/Si_marcs_LTE_dir/'
70/11: test_cog = CoG(runs=LTE_runs, lines=major_krs)
70/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
70/13:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
70/14:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.6, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
70/15:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'LTE Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
70/16:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.6, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
70/17:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.6, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
70/18:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.55, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
70/19:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
70/20:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.55, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
70/21:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.53, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
69/8: # sav_data['iag_sun']
71/1:
# # Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

# print(f' Multi wavelengths (Å): {major_line_wavelengths}')

# print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths), 3}')

# print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

# plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))

# 5th line (5773.75Å) has wrong? transition energy 

# # transition from 56 to 10
# # acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
# print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
# print(f'eV acc. level 10: {runLTEmarcs.ev[9]},   eV acc. level 56: {runLTEmarcs.ev[55]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
71/2:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(17.5,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
71/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
71/4:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
71/5:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
71/6:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
71/7:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
71/8:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
71/9:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
71/10:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
71/11:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'LTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')


[ax[i].legend() for i in range(len(ax))]
plt.tight_layout()

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
71/12:
fig2, ax2 = plt.subplots(figsize=(20,7))
# LTEfalc_majorlines[1].plot(label='LTE falc')
# NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
# LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
# plt.savefig('si_line_ex.pdf')
71/13:
# equivalent widths for the major lines
NLTE3d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.calc_weq(qmax=3.5) for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.calc_weq(qmax=3.5) for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.i for line in LTEstag55230_majorlines],1)], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.j for line in LTEstag55230_majorlines],1)], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
71/14:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(17.5,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
71/15:
# # Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

# print(f' Multi wavelengths (Å): {major_line_wavelengths}')

# print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths), 3}')

# print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

# plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))

# 5th line (5773.75Å) has wrong? transition energy 

# # transition from 56 to 10
# # acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
# print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
# print(f'eV acc. level 10: {runLTEmarcs.ev[9]},   eV acc. level 56: {runLTEmarcs.ev[55]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
73/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
73/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
73/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
73/4:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
73/5:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)

plt.tight_layout()
73/6: wavelengths = [line.lam0 for line in linesobj[0]]
73/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # ax[k].xlim((wavelengths[k]-0.5)

plt.tight_layout()
73/8:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
73/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # ax[k].xlim((wavelengths[k]-0.5)

plt.tight_layout()
73/10:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    ax[k].xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/11:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    ax[k].xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/12:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    # ax[k].plot(lam, flux, linestyle='none', marker='.')
    print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    ax[k].xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/13:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    # ax[k].plot(lam, flux, linestyle='none', marker='.')
    print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/14:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/15:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/16:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/17:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
69/9:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5689.2,5690.4)
69/10:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5689.7,5690.4)
69/11:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5689.7,5692.4)
73/18:
wavelengths = [line.lambda0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
73/19:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/20:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
73/21:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)
        ax[j].legend(labels)


for k, wav in enumerate(wavelengths):
    ax[k].plot(lam, flux, linestyle='none', marker='.')
    # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
    plt.sca(ax[k])
    plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5), label='solar spec')


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/23:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', label='solar spec')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/24:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE', '3D NLTE' , 'solar spec']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
73/25:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/26:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
73/27:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE','solar spec', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
73/28:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(12,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/29:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/30:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,20))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/31:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,25))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.')
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/32:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,25))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.3)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/33:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.3)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/34:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.1)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
73/35:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
74/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
74/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
74/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
74/4:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE','solar spec', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
74/5:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
74/6:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
75/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
76/1:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import matplotlib.pyplot as plt
76/2:
# data_dir = pjoin(dirname(sio.__file__))#, 'tests', 'data')
# sav_fname = pjoin('iag_sun.sav')
# sav_data = readsav(sav_fname)
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
76/3: print(sav_data.keys())
76/4: # sav_data['iag_sun']
76/5:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5689.7,5692.4)
75/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
76/6: sav_data['iag_sun'].wave[0].shape
75/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
75/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
75/5: wavelengths = [line.lambda0 for line in linesobj[0]]
75/6: wavelengths
75/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
75/8: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
75/9:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
75/10: LTE_runs = 'runs/Si_marcs_LTE_dir/'
75/11: test_cog = CoG(runs=LTE_runs, lines=major_krs)
75/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
75/13:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
75/14:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.53, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
76/7:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5792,5794)
76/8:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5792,5797)
74/7: wavelengths
74/8:
wavelengths = [line.lambda0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
74/9: wavelengths
76/9:
fig, ax = plt.subplots(figsize=(40,10))
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]

# ax.set_xlim(7000, 7300)
# ax.set_xlim(6750, 6800)

plt.plot(lam, flux, linestyle='none', marker='.')
plt.xlim(5794,5796)
74/10:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
74/11:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
74/12: wavelengths
74/13:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
74/14:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
76/10: sav_data['iag_sun']
79/1: 8.576e-3
79/2: 8.576e-3/3
79/3: np.log(8.576e-3)
79/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
79/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
79/6:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
79/7:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE','solar spec', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
79/8:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
79/9: wavelengths
79/10:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
79/11: np.log(8.576e-3)
79/12: np.log10(8.576e-3)
79/13: (-1.63)**10
79/14: ((-1.63)**10)/3
79/15: ((-2.067)**10)/3
79/16: (10**(-2.067))/3
79/17: (10**(-1.63))/3
81/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
81/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
81/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
81/4:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE','solar spec', '3D NLTE' ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/5:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/6: wavelengths
81/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/8:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))

        plt.sca(ax[j])
        thisline.plot(qmax=3.5)

       


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))

        
        thisline.plot(qmax=3.5)

       


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/10:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE', '3D NLTE','solar spec', ]
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/11:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/12: wavelengths
81/13:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        ax[j].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
        plt.xlim((wavelengths[j]-0.5), (wavelengths[j]+0.5))

        
        thisline.plot(qmax=3.5)

       


        ax[j].legend(labels)


# for k, wav in enumerate(wavelengths):
#     ax[k].plot(lam, flux, linestyle='none', marker='.')
#     # print((wavelengths[k]-0.5), (wavelengths[k]+0.5))
#     plt.sca(ax[k])
#     plt.xlim((wavelengths[k]-0.5), (wavelengths[k]+0.5))

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/14:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    ax[i].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
81/15:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', alpha=0.2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
81/16:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zlevel=0.2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
81/17:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
81/18:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[i]):
        run.plot(qmax=3.5)
81/19:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:,i]):
        run.plot(qmax=3.5)
81/20:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        run.plot(qmax=3.5)
81/21: linesobj
81/22: linesobj[0]
81/23: linesobj[0][0]
81/24: linesobj[0][0].plot
81/25: linesobj[0][0].plot()
81/26:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[i][:]):
        run.plot(qmax=3.5)
81/27: linesobj[1][0].plot()
81/28: linesobj[2][0].plot()
81/29: enumerate(linesobj[0][:]
81/30: enumerate(linesobj[0][:])
81/31: print(enumerate(linesobj[0][:]))
81/32: linesobj[0][0].plot()
81/33:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        run[j].plot(qmax=3.5)
81/34:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        run.plot[j](qmax=3.5)
81/35:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thisline in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        run.plot(qmax=3.5)
81/36:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        linesobj[j][i].plot(qmax=3.5)
81/37:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        print(i,j)
        # linesobj[j][i].plot(qmax=3.5)
81/38:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        # print(i,j)
        linesobj[i][j].plot(qmax=3.5)
81/39:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        print(i,j)
        linesobj[i][j].plot(qmax=3.5)
81/40:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))

    for j, run in enumerate(linesobj[:][i]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/41: major_krs
81/42:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    print(i)
    for j, run in enumerate(linesobj[:][i]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/43:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    print(i)
    for j, run in enumerate(linesobj[i][j]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/44:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    print(i)
    for j, run in enumerate(linesobj[i][:]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/45:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    print(i)
    for j, run in enumerate(linesobj[:][i]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/46: linesobj[0][0]
81/47: linesobj
81/48: linesobj[0]
81/49: linesobj[0][0]
81/50: linesobj
81/51: linesobj[:][0]
81/52: linesobj[0][:]
81/53:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    print(i)
    for j, run in enumerate(linesobj[:]):
        print(i,j)
        # linesobj[i][j].plot(qmax=3.5)
81/54:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    # print(i)
    for j, run in enumerate(linesobj[:]):
        # print(i,j)
        linesobj[i][j].plot(qmax=3.5)
81/55:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    # print(i)
    for j, run in enumerate(linesobj[:]):
        # print(i,j)
        linesobj[j][i].plot(qmax=3.5)
81/56:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2)
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/57:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = [ '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/58: linesobj[0][:]
81/59:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/60: wavelengths
81/61: major_krs
81/62:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2, label='solar spec')
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/63:
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/64:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/65:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=2, label='solar spec')
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/66:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/67:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
linesobj[0]
81/68:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
linesobj[0][0]
81/69:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
linesobj[0][0].__dict__
81/70:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
linesobj[0][0].flux
81/71: linesobj[2][0]
81/72: linesobj[2][:]
81/73:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
81/74:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_factor
81/75:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
81/76:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = linesobj[0][0].flux * adj_factor
81/77:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[2][0].lam, adj_1DLTE)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/78:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[2][0].lam, adj_1DLTE)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/79:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = linesobj[0][0].flux * adj_factor
adj_1DLTE
81/80:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = linesobj[0][0].flux * adj_factor
linesobj[0][0].flux
81/81:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = [linesobj[0][0].flux * adj_factor]
linesobj[0][0].flux
81/82:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = [linesobj[0][0].flux * adj_factor]
adj_1DLTE
81/83:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = linesobj[0][0].flux * adj_factor
adj_1DLTE
81/84:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[2][0].lam, linesobj[2][0].flux)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/85:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[0][0].laa, linesobj[0][0].flux)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/86:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[0][0].laa, linesobj[0][0].flux)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/87:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line
ax[0].plot(linesobj[0][0].lam, linesobj[0][0].flux)
plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/88: linesobj[0][0].lam
81/89: linesobj[0][0].flux
81/90:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
81/91:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])

adj_1DLTE
81/92:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor
81/93:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_1DLTE.plot(qmax=3.5)
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/94:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_1DLTE.plot(qmax=3.5, label='adj 1d')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/95:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_1DLTE.plot(qmax=3.5, label='adj 1d')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    # for j, run in enumerate(linesobj[:]):
    #     linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/96:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = adj_3DNLTE.flux * adj_factor
81/97:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/98:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = 1 - ((1-adj_3DNLTE.flux) * adj_factor)
81/99:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/100:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = adj_3DNLTE.flux * adj_factor
81/101:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/102:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.subtract(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = adj_3DNLTE.flux + adj_factor
81/103:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/104: print(adj_factor)
81/105: plt.plot(adj_factor)
81/106:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].flux, linesobj[0][0].flux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.flux  = adj_1DLTE.flux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = adj_3DNLTE.flux * adj_factor
81/107:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/108: plt.plot(linesobj[2][0].flux)
81/109:
plt.plot(linesobj[2][0].flux)
plt.plot(linesobj[0][0].flux)
81/110:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
81/111:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux
81/112:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.flux = 1 - (1 - adj_3DNLTE.flux) * factor
81/113:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/114:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.flux) * factor
81/115:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/116:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.flux) * factor
plt.plot(adj_3DNLTE.nflux)
81/117:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
#adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.flux) * factor
plt.plot(adj_3DNLTE.nflux)
81/118:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor
plt.plot(adj_3DNLTE.nflux)
81/119:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/120:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
        if j == 2:
            linesobj[j][i].nflux
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/121:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
        if j == 2:
            print(linesobj[j][i].nflux)
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/122:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor


plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.plot(adj_3DNLTE.nflux)
81/123:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor


ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.plot(adj_3DNLTE.nflux)
81/124:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].flux / linesobj[2][0].flux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor


# ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.plot(adj_3DNLTE.nflux)
81/125:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/126:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].nflux / linesobj[2][0].nflux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor


# ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.plot(adj_3DNLTE.nflux)
81/127:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/128:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/129:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    # for j, run in enumerate(linesobj[:]):
    #     linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/130:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    # for j, run in enumerate(linesobj[:]):
    #     linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/131:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE')
    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/132:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100)

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/133: adj_factor
81/134:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100, marker='-')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/135:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100, marker='--')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/136:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100, marker='-.')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/137:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100, marker='.')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/138:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE',zorder=100, marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/139:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/140: plt.plot(linesobj[1][0].nflux)
81/141:
plt.plot(linesobj[1][0].nflux)
plt.plot(adj_3DNLTE.nflux)
81/142: linesobj[1][0].plot
81/143: linesobj[1][0].plot()
81/144:
linesobj[1][0].plot()
adj_3DNLTE.plot()
81/145:
adj_3DNLTE.plot()
linesobj[1][0].plot()
81/146:
adj_3DNLTE.plot()
linesobj[2][0].plot()
81/147:
adj_3DNLTE.plot()
linesobj[1][0].plot()
81/148:
adj_3DNLTE.plot(marker='o')
linesobj[1][0].plot()
81/149:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux)

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/150:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux)

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/151:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/152:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - ((1 -adj_3DNLTE.nflux * adj_factor))
81/153:
plt.plot(linesobj[1][0].nflux)
plt.plot(adj_3DNLTE.nflux)
81/154:
adj_3DNLTE.plot(marker='o')
linesobj[1][0].plot()
81/155:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/156:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].weq, linesobj[0][0].weq)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - ((1 -adj_3DNLTE.nflux * adj_factor))
81/157:
plt.plot(linesobj[1][0].nflux)
plt.plot(adj_3DNLTE.nflux)
81/158:
adj_3DNLTE.plot(marker='o')
linesobj[1][0].plot()
81/159:
#plt.plot(linesobj[2][0].flux)
#plt.plot(linesobj[0][0].flux)
#plt.plot(linesobj[0][0].flux / linesobj[2][0].flux)
factor = linesobj[0][0].nflux / linesobj[2][0].nflux


adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - (1 - adj_3DNLTE.nflux) * factor


# ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.plot(adj_3DNLTE.nflux)
81/160:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/161: major_krs
81/162:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/163: major_krs
81/164:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/165:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].weq, linesobj[0][0].weq)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = 1 - ((1 -adj_3DNLTE.nflux * adj_factor))
81/166:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/167:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].weq, linesobj[0][0].weq)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/168:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/169:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].weq, linesobj[0][0].weq)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux /adj_factor
81/170:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/171:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/172:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/173:
major_krs = [286, 291, 293, 299, 428, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/174: major_krs
81/175:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/176:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/177:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/178:
major_krs = [286, 291, 293, 299, 426, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/179: major_krs
81/180:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/181:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/182:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/183:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
81/184: major_krs
81/185:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
81/186:
# Calc change between old and new f-value 1D LTE lines for line 1
# old 1D:
adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
adj_1DLTE = copy.deepcopy(linesobj[0][0])
adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

adj_3DNLTE = copy.deepcopy(linesobj[1][0])
adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
81/187:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
81/188: linesobj[4]
81/189: linesobj[4]
81/190: linesobj[:][4]
81/191: linesobj
81/192: linesobj[0][4]
81/193: linesobj[0][4]__dict__
81/194: linesobj[0][4].__dict__
81/195: plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
81/196:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.set_xlim(7034,7035)
81/197:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034,7035)
81/198:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.9,7035)
81/199:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.8,7035)
81/200:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
81/201: vacuum2obs
81/202: vacuum2obs(5000)
81/203: vacuum2obs(5000.)
81/204: vacuum2obs([5000.])
81/205:
vac = np.array([5000], dtype=np.float64)

vacuum2obs(vac)
81/206:
vac = np.array([7036.406], dtype=np.float64)

vacuum2obs(vac)
82/1:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'run/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
82/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
82/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
82/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
82/5:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'run/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
82/6:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'rus/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
82/7:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
82/8:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
82/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
82/10: obs2vacuum(vac)
82/11: plt.plot(linesobj[2][0])
82/12: plt.plot(linesobj[2][0].nflux)
82/13: plt.plot(linesobj[2][0].lam0,linesobj[2][0].nflux)
82/14: plt.plot(linesobj[2][0].lam,linesobj[2][0].nflux)
82/15:
plt.plot(linesobj[2][-2].lam,linesobj[2][0].nflux)
plt.xlim()
82/16:
plt.plot(linesobj[2][-2].lam,linesobj[2][-2].nflux)
plt.xlim()
82/17:
plt.plot(linesobj[2][-2].lambda,linesobj[2][-2].nflux)
plt.xlim()
82/18:
plt.plot(linesobj[2][-2].laa,linesobj[2][-2].nflux)
plt.xlim()
82/19:
plt.plot(linesobj[2][-2].lam,linesobj[2][-2].nflux)
plt.xlim()
82/20:
plt.plot(linesobj[2][-2].laa,linesobj[2][-2].nflux)
plt.xlim()
82/21:
plt.plot(linesobj[2][-2].laa,linesobj[2][-2].nflux)
plt.xlim(7036,7037)
82/22:
plt.plot(linesobj[2][-2].laa,linesobj[2][-2].nflux)
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7036,7037)
82/23:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
82/24:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()
ax[-2].vline(7034.89736437)
# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
82/25:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()
ax[-2].axvline(7034.89736437)
# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
82/26: np.log10(1.304e-1)
82/27: 47297 - 47351
82/28: 61402 - 47297
83/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
83/2:
d = {'atom file comment wlength': [7034.901], 'M3D output wlength': [7034.49]}
df = pd.DataFrame(data=d)
83/3:
d = {'atom file comment wlength': [7034.901], 'M3D output wlength': [7034.49]}
df = pd.DataFrame(data=d)
df
83/4:
d = {'atom file comment wlength Å': [7034.901], 'M3D output wlength Å': [7034.49]}
df = pd.DataFrame(data=d)
df
83/5:
d = {'atom file comment wlength Å': [7034.901], 'M3D output wlength Å': [7034.49], 'Rhodin wlength(vac) Å': [7036.841]}
df = pd.DataFrame(data=d)
df
83/6:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841]}
df = pd.DataFrame(data=d)
df
83/7:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
83/8:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897]}
df = pd.DataFrame(data=d)
df
83/9:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897],
'atom file energy cm-1':[4.754E-02], 'Rhodin energy':[14210.923]}
}
df = pd.DataFrame(data=d)
df
83/10:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897],
'atom file energy cm-1':[4.754E-02], 'Rhodin energy':[14210.923]}

df = pd.DataFrame(data=d)
df
83/11:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897],
'atom file energy cm-1':['61563.305 - 47351.555 = 14211.75'], 'Rhodin energy':[14210.923]}

df = pd.DataFrame(data=d)
df
83/12:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897],
'atom file energy cm-1':['61563.305 - 47351.555 = 14211.75'], 'Rhodin energy cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/13:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897], 
'atomfile Up Erg cm-1':['61563.305'], 'atomfile Up G':[16],'atomfile Down Erg cm-1':['47351.555'], 'atomfile Up G':[5],
'atomfile energydiff cm-1': [14211.75], 'Rhodin energydiff cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/14:
d = {'atom file comment wl Å': [7034.901], 'M3D output wl Å': [7034.49], 'Rhodin wl(vac) Å': [7036.841], 'Rhodin wl(obs) Å': [7034.897], 
'atomfile Up Erg cm-1':['61563.305'], 'atomfile Up G':[16],'atomfile Down Erg cm-1':['47351.555'], 'atomfile Down G':[5],
'atomfile energydiff cm-1': [14211.75], 'Rhodin energydiff cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/15:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_down (atom)cm-1':['47351.555'], 'g_down(atom)':[5],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923], 

df = pd.DataFrame(data=d)
df
83/16:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_down (atom)cm-1':['47351.555'], 'g_down(atom)':[5],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/17:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/18:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

df = pd.DataFrame(data=d)
print(df)
83/19:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

df = pd.DataFrame(data=d)
print(df)
83/20:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292],
'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

df = pd.DataFrame(data=d)
df
83/21:
d = {'lambda_atom Å': [7034.901], 'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#

df = pd.DataFrame(data=d)
df
83/22:
d = {'lambda_atom Å': [7034.901],  'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49],

df = pd.DataFrame(data=d)
df.to_
83/23:
d = {'lambda_atom Å': [7034.901],  'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49],

df = pd.DataFrame(data=d)
print(df)
83/24:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
84/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
84/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
84/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
84/4:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
84/5:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
84/6:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
84/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
84/8:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
84/9: (10**(-1.63))/3
84/10:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
84/11:
d = {'lambda_atom Å': [7034.901],  'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49],

df = pd.DataFrame(data=d)
print(df)
84/12:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
84/13:
d = {'lambda_atom Å': [7034.901],  'lambda paper(vac)Å': [7036.841], 'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49],

df = pd.DataFrame(data=d)
df
84/14:
d = {'lambda_atom Å': [7034.901],  'lambda paper(obs)Å': [7034.897], 
'e_up (atom)cm-1':['61563.305'], 'g_up (atom)':[16],'e_low (atom)cm-1':['47351.555'], 'g_low(atom)':[5], 'e_up(paper)cm-1':[61402], 
'e_low(paper)cm-1': [47292]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
84/15:
vac = np.array([5645.613], dtype=np.float64)

vacuum2obs(vac)
84/16:
d = {'lambda_atom Å': [7034.901,5645.613 ],  'lambda paper(obs)Å': [7034.897, 5644.044], 
'e_up (atom)cm-1':[61563.305, 57468.238], 'g_up (atom)':[16,5],'e_low (atom)cm-1':[47351.555, 39760.285], 'g_low(atom)':[5,3], 'e_up(paper)cm-1':[61402, 57316], 
'e_low(paper)cm-1': [47292, 39720]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
84/17:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484 ],  'lambda paper(obs)Å': [7034.897, 5644.044], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918], 'g_up (atom)':[16,5, 3],'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055], 'g_low(atom)':[5,3, 5], 'e_up(paper)cm-1':[61402, 57316], 
'e_low(paper)cm-1': [47292, 39720]}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
84/18:
vac = np.array([5701.37], dtype=np.float64)

vacuum2obs(vac)
84/19:
vac = np.array([5708.397], dtype=np.float64)

vacuum2obs(vac)
84/20: major_krs
84/21:
vac = np.array([722.8199], dtype=np.float64)

vacuum2obs(vac)
84/22:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
84/23:
vac = np.array([7228.668], dtype=np.float64)

vacuum2obs(vac)
84/24:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
84/25:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 5644.044, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
84/26:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
84/27:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
84/28:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
84/29:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
86/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
86/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
86/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
86/4:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
86/5:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
86/6:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
86/7: major_krs
86/8:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
86/9:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
86/10: (10**(-1.63))/3
86/11:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
86/12:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
86/13:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 5644.044, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
86/14:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
87/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np

%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
87/2:
runLTEfalc = m3d('runs/Si_falc_LTE_run/output/',  conts=[])
# runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/',  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', conts=[])
# runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', conts=[])
# runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', conts=[])
87/3:
def get_majorlines(thisrun):

    majorlines = []
    for i, thisline in enumerate(thisrun.line):
        if thisline.nnu > 80:
            majorlines.append(thisline)
    return majorlines
87/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
87/5:
LTEfalc_majorlines = get_majorlines(runLTEfalc)
# NLTEfalc_majorlines = get_majorlines(runNLTEfalc)
# # LTEBICH_majorlines = get_majorlines(runLTEBICH)
# # NLTEBICH_majorlines = get_majorlines(runNLTEBICH)
# LTEstag55230_majorlines = get_majorlines(runLTEstag55230)
# NLTEstag55230_majorlines = get_majorlines(runNLTEstag55230)
87/6:
major_krs = []
for i, _ in enumerate(LTEfalc_majorlines):
    major_krs.append(LTEfalc_majorlines[i].kr)
87/7:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
runNLTEfalc = m3d('runs/Si_falc_NLTE_run/output/', lines=major_krs,  conts=[])
# runNLTEBICH = m3d('runs/Si_BICH_NLTE_run/output/', lines=major_krs,conts=[])
# runLTEBICH = m3d('runs/Si_BICH_LTE_run/output/', lines=major_krs,conts=[])
runLTEstag55230 = m3d('runs/Si_stag_LTE_5x5x230_run/output/', lines=major_krs,conts=[])
runNLTEstag55230 = m3d('runs/Si_stag_NLTE_5x5x230_run/output/', lines=major_krs,conts=[])

runLTEstag20230 = m3d('runs/Si_stag_LTE_20x230_run/output/', lines=major_krs,conts=[])
# runNLTEstag20230 = m3d('runs/Si_stag_NLTE_20x20x230_run/output/', lines=major_krs,conts=[])

runLTEmarcs = m3d('runs/Si_marcs_LTE_run/output', lines=major_krs, conts=[])
runNLTEmarcs = m3d('runs/Si_marcs_NLTE_run/output', lines=major_krs, conts=[])
87/8:
NLTEfalc_majorlines = get_lines(runNLTEfalc, major_krs)
# LTEBICH_majorlines = get_majorlines(runLTEBICH)
# NLTEBICH_majorlines = get_majorlines(runNLTEBICH)


LTEstag55230_majorlines = get_lines(runLTEstag55230, major_krs)
NLTEstag55230_majorlines = get_lines(runNLTEstag55230, major_krs)

LTEstag20230_majorlines = get_lines(runLTEstag20230, major_krs)
# NLTEstag20230_majorlines = get_lines(runNLTEstag20230, major_krs)


LTEmarcs_majorlines = get_lines(runLTEmarcs, major_krs)
NLTEmarcs_majorlines = get_lines(runNLTEmarcs, major_krs)
87/9:
fig, ax = plt.subplots(len(LTEfalc_majorlines), 1, figsize=(25,30))


for i, thisline in enumerate(LTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE falc')

for i, thisline in enumerate(NLTEfalc_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE falc')

# for i, thisline in enumerate(LTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'LTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'LTE BICH')

# for i, thisline in enumerate(NLTEBICH_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE BICH: eqw={thisline.calc_weq(qmax=3.5):.2f}')
#         # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')
for i, thisline in enumerate(NLTEstag55230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE stagger 5x5: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        # ax[i].plot(thisline.lam, thisline.flux, qmax=3.5,label = 'NLTE BICH')

for i, thisline in enumerate(LTEstag20230_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

# for i, thisline in enumerate(NLTEstag20230_majorlines):
#         plt.sca(ax[i])
#         thisline.plot(qmax=3.5,label=f'NLTE stagger 20x20: eqw={thisline.calc_weq(qmax=3.5):.2f}')

for i, thisline in enumerate(LTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'LTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')
        
for i, thisline in enumerate(NLTEmarcs_majorlines):
        plt.sca(ax[i])
        thisline.plot(qmax=3.5,label=f'NLTE marcs: eqw={thisline.calc_weq(qmax=3.5):.2f}')


[ax[i].legend() for i in range(len(ax))]
plt.tight_layout()

# handles, labels = plt.gca().get_legend_handles_labels()
# by_label = dict(zip(labels, handles))
# plt.legend(by_label.values(), by_label.keys(), loc='lower left')
87/10:
fig2, ax2 = plt.subplots(figsize=(20,7))
# LTEfalc_majorlines[1].plot(label='LTE falc')
# NLTEfalc_majorlines[1].plot(label='NLTE falc')
# LTEBICH_majorlines[1].plot(label='LTE BICH')
# NLTEBICH_majorlines[1].plot(label='NLTE BICH')
LTEstag55230_majorlines[1].plot(label='LTE stagger 5x5')
NLTEstag55230_majorlines[1].plot(label='NLTE stagger 5x5')
LTEmarcs_majorlines[1].plot(label='LTE marcs')
NLTEmarcs_majorlines[1].plot(label='NLTE marcs')
# LTEstag20230_majorlines[1].plot(label='LTE stagger 20x20')

fig2.legend()

ax2.set_xlim(5684.2,5684.8)
# plt.savefig('si_line_ex.pdf')
87/11:
# equivalent widths for the major lines
NLTE3d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEstag55230_majorlines]
LTE3d_eqws = [line.calc_weq(qmax=3.5) for line in LTEstag55230_majorlines]
NLTE1d_eqws = [line.calc_weq(qmax=3.5) for line in NLTEmarcs_majorlines]
LTE1d_eqws = [line.calc_weq(qmax=3.5) for line in LTEmarcs_majorlines]

# equivalent width differences

eqw_NLTE3d_diff_LTE1d_eqws = np.divide(np.absolute(np.subtract(NLTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_LTE3d_diff_LTE1d_eqws =  np.divide(np.abs(np.subtract(LTE3d_eqws, LTE1d_eqws)), LTE1d_eqws)*100
eqw_NLTE1d_diff_LTE1d_eqws = np.divide(np.abs(np.subtract(NLTE1d_eqws, LTE1d_eqws)), LTE1d_eqws)*100

# centre line wavelengths
major_line_wavelengths = [round(line.lambda0,2) for line in LTEstag55230_majorlines]
major_line_wavelengths

# f values
major_line_f_vals = [round(line.f,4) for line in LTEstag55230_majorlines]
major_line_f_vals

# Low energy level levels
major_line_lower_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.i for line in LTEstag55230_majorlines],1)], 3)

# upper energy levels
major_line_upper_energylevels = np.round(runLTEstag55230.ev[np.subtract([line.j for line in LTEstag55230_majorlines],1)], 3)

# transition $\Delta E$
major_line_energydiffs = np.subtract(major_line_upper_energylevels, major_line_lower_energylevels)
87/12:
fig_wave, ax_wave = plt.subplots(3, 4, figsize=(17.5,10))

# 3D NLTE vs 1D LTE
ax_wave[0,0].plot(major_line_wavelengths, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,0].set_xlabel('Centre wavelength, Å');
ax_wave[0,0].set_ylabel('Eq. width diff, %');
ax_wave[0,0].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,1].plot(major_line_f_vals, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,1].set_xlabel('f, $cm^{-1}$');
ax_wave[0,1].set_ylabel('Eq. width diff, %');
ax_wave[0,1].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,2].plot(major_line_lower_energylevels, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,2].set_xlabel('Low energy level, eV');
ax_wave[0,2].set_ylabel('Eq. width diff, %');
ax_wave[0,2].set_title('3D NLTE - 1D LTE eq. width');

ax_wave[0,3].plot(major_line_energydiffs, eqw_NLTE3d_diff_LTE1d_eqws, 'x')
ax_wave[0,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[0,3].set_ylabel('Eq. width diff, %');
ax_wave[0,3].set_title('3D NLTE - 1D LTE eq. width');
ax_wave[0,3].invert_xaxis()


# 3D LTE vs 1D NLTE
ax_wave[1,0].plot(major_line_wavelengths, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,0].set_xlabel('Centre wavelength, Å');
ax_wave[1,0].set_ylabel('Eq. width diff, %');
ax_wave[1,0].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,1].plot(major_line_f_vals, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,1].set_xlabel('f, $cm^{-1}$');
ax_wave[1,1].set_ylabel('Eq. width diff, %');
ax_wave[1,1].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,2].plot(major_line_lower_energylevels, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,2].set_xlabel('Low energy level, eV');
ax_wave[1,2].set_ylabel('Eq. width diff, %');
ax_wave[1,2].set_title('3D LTE - 1D LTE eq. width');

ax_wave[1,3].plot(major_line_energydiffs, eqw_LTE3d_diff_LTE1d_eqws, 'x')
ax_wave[1,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[1,3].set_ylabel('Eq. width diff, %');
ax_wave[1,3].set_title('3D LTE - 1D LTE eq. width');
ax_wave[1,3].invert_xaxis()



# 1D NLTE vs 3D LTE
ax_wave[2,0].plot(major_line_wavelengths, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,0].set_xlabel('Centre wavelength, Å');
ax_wave[2,0].set_ylabel('Eq. width diff, %');
ax_wave[2,0].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,1].plot(major_line_f_vals, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,1].set_xlabel('f, $cm^{-1}$');
ax_wave[2,1].set_ylabel('Eq. width diff, %');
ax_wave[2,1].set_title('1D NLTE - 1D LTE eq. width');

ax_wave[2,2].plot(major_line_lower_energylevels, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,2].set_xlabel('Low energy level, eV');
ax_wave[2,2].set_ylabel('Eq. width diff, %');
ax_wave[2,2].set_title('1D NLTE - 1D LTE eq. width')

ax_wave[2,3].plot(major_line_energydiffs, eqw_NLTE1d_diff_LTE1d_eqws, 'x')
ax_wave[2,3].set_xlabel('Transition $\Delta E$, eV');
ax_wave[2,3].set_ylabel('Eq. width diff, %');
ax_wave[2,3].set_title('1D NLTE - 1D LTE eq. width');
ax_wave[2,3].invert_xaxis()



plt.tight_layout()
plt.savefig('si_plot.pdf')
87/13:
# # Debug - check wavelengths and upper/lower energy levels are consistent in multi : 1Å = 1/12398eV

# print(f' Multi wavelengths (Å): {major_line_wavelengths}')

# print(f'Multi wavelengths (Å) to eV: {np.divide(12398 ,major_line_wavelengths), 3}')

# print(f'Multi enerfy diff (eV): {major_line_energydiffs}')

# plt.scatter(major_line_wavelengths, np.subtract((np.divide(12398 ,major_line_wavelengths)), major_line_energydiffs))

# 5th line (5773.75Å) has wrong? transition energy 

# # transition from 56 to 10
# # acc. to multi:  58311.660cm-1 (7.23 eV)    to 40991.883cm-1 (5.082346 eV) ie 
# print(f'Transition from level 56 to 10: {round((58311.660 - 40991.883),3)}cm-1 ie. 2.147eV')
# print(f'eV acc. level 10: {runLTEmarcs.ev[9]},   eV acc. level 56: {runLTEmarcs.ev[55]}, eV diff = {runLTEmarcs.ev[56] - runLTEmarcs.ev[10]}')
86/15:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
86/16:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 5645.613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
86/17:
vac = np.array([5684.484], dtype=np.float64)

vacuum2obs(vac)
86/18:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, ang=1, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
86/19:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
86/20:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, ang=1, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/1:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
88/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
88/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
88/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
88/5:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
88/6:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
88/7:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
88/8: major_krs
88/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/10:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
88/11: (10**(-1.63))/3
88/12:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
88/13:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
88/14:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
88/15:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
88/16:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
obs_spec2 = np.loadtxt(fname='../data/spetra/sun_kpnomu1_6000_8000A.txt')
88/17:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
obs_spec2 = np.loadtxt(fname='/../data/spetra/sun_kpnomu1_6000_8000A.txt')
88/18:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
obs_spec2 = np.loadtxt(fname='../data/spetra/1631885174310_iag_sun_Si.sav')
88/19:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spetra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
88/20:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
88/21: os.listdir
88/22: os.listdir()
88/23: os.listdir(''../data/spetra')
88/24: os.listdir('../data/spetra')
88/25: os.listdir('../')
88/26: os.listdir('../data')
88/27:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
88/28:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
88/29:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
88/30:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
88/31:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
88/32: major_krs
88/33: print(obs_spec2[10,10])
88/34: print(obs_spec2)
88/35: pprint(obs_spec2)
88/36: print(obs_spec2[0])
88/37: print(obs_spec2[0][0])
88/38: print(obs_spec2[0)
88/39: print(obs_spec2[0])
88/40: print(obs_spec2[:,0])
88/41: zip(obs_spec2)
88/42: print(zip(obs_spec2))
88/43: a, b = zip(obs_spec2)
88/44: print(obs_spec2[:,0])
88/45:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/46:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='x')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/47:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='x')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/48:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='.-')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/49:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=1, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/50:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/51:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.5), (wavelengths[i]+0.5))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/52:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.6), (wavelengths[i]+0.6))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
88/53: sav_data
88/54: mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
88/55:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    print(mu_z)
88/56: np.conj(1)
88/57:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.append(conjugate, 0.0, -conjugate, 0.0)
    muyout.append(0.0, conjugate, 0.0, -conjugate)
88/58:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.append((conjugate, 0.0, -conjugate, 0.0))
    muyout.append((0.0, conjugate, 0.0, -conjugate))
88/59:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.append((conjugate, 0.0, -conjugate, 0.0))
    muyout.append((0.0, conjugate, 0.0, -conjugate))

print('muxout = ':muxout)
88/60:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.append((conjugate, 0.0, -conjugate, 0.0))
    muyout.append((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',muxout)
88/61:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.concat(conjugate, 0.0, -conjugate, 0.0)
    muyout.append((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',muxout)
88/62:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',muxout)
88/63:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
88/64:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muxout)
print('muzout = :',*muxout)
88/65:
mu_zs = [1, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
88/66:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(3):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
88/67:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
88/68: np.sqrt(1-0.8**2)
88/69:
# mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
mu_zs = [1.0, 0.793, 0.608, 0.6, 0.4, 0.2]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
88/70:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
88/71:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*str(muyout))
print('muzout = :',*muzout)
88/72:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
90/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
90/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
obs
90/3:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.6), (wavelengths[i]+0.6))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], dlam=7034.901)
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
90/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
obs
90/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
90/7:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
90/8: # sav_data
90/9: print(obs_spec2[:,0])
90/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
90/11:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
90/12:
wavelengths = [line.lam0 for line in linesobj[0]]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
90/13:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
90/14: major_krs
90/15:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.6), (wavelengths[i]+0.6))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], dlam=7034.901)
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/16:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
90/17: (10**(-1.63))/3
90/18:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
90/19:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
90/20:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
90/21:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
90/22:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
90/23: np.sqrt(1-0.8**2)
90/24:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.6), (wavelengths[i]+0.6))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/25:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/26:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        if j = 4:
            linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=7034.901)
        else:

            linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        if j == 4:
            linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=7034.901)
        else:

            linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/28:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        if i == 4:
            linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=7034.901)
        else:

            linesobj[j][i].plot(qmax=3.5, label=labels[j])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/29:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484    , 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
90/30:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((wavelengths[i]-0.45), (wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
     
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
90/31:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.45), (m3d_centre_wavelengths[i]+0.45))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
     
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
92/1:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
92/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
92/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
92/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
92/5:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
92/6:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
92/7:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
92/8: major_krs
92/9:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.6), (m3d_centre_wavelengths[i]+0.6))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
92/10:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
92/11: (10**(-1.63))/3
92/12:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
92/13:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
92/14:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
92/15:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
92/16:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
92/17: np.sqrt(1-0.8**2)
92/18:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
92/19:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelength[i]+0.35))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
92/20:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
92/21:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
92/22:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
92/23:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
92/24:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
92/25:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
92/26: major_krs
92/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelength[i]+0.35))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
92/28:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
92/29:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
92/30:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
93/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
93/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
94/1:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
94/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
94/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
94/4: # sav_data
94/5: print(obs_spec2[:,0])
94/6: # sav_data
94/7: print(obs_spec2[:,0])
96/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
96/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
96/3: # sav_data
96/4: print(obs_spec2[:,0])
96/5:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
96/6:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
96/7: # sav_data
96/8:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
96/9:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
96/10:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
obs_spec2
96/11: # sav_data
96/12:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
96/13:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/14: for mu_z in mu_zs
96/15:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/16:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = [ 'runs/Si_stag_NLTE_5x5x230_mus/output/', 'runs/Si_marcs_LTE_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/17: !pwd
96/18:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/19:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/20:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
96/21: !ls runs/Si_marcs_LTE_mus/output
96/22: !ls runs/Si_marcs_LTE_mus/output/
96/23: !ls runs/Si_marcs_LTE_mus/
96/24: np.sqrt(0.9^2 + 0.4359^2)
96/25: np.sqrt(0.9**2 + 0.4359**2)
96/26: np.sqrt(0.9**2 + 0.4358**2)
96/27: np.sqrt(0.6**2 + 0.8**2)
96/28: np.sqrt(0.9165**2 + 0.4**2)
96/29: np.sqrt(0.9798**2 + 0.2**2)
96/30: np.sqrt(0.9797**2 + 0.2**2)
96/31: np.sqrt(-0.9797**2 + 0.2**2)
96/32: np.sqrt(0.9797**2 + 0.2**2)
96/33: np.sqrt(0.6**2 + 0.7999**2)
96/34:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
97/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
97/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
97/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/4:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ))
97/5:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/6:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/7:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.00011
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/8:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.0002
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/9:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.0002
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/10:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/11:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/12:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/13:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) - 0.00001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/14:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/15:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2)- 0.00001 ,4) 
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/16:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/17:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4) 
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/18:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/19:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)  - 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/20:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/21:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/22:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),5)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/23:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),6)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/24:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),7)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/25:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),3)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/26:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),3)
    if mu_z == 0.4:
        conjugate -= 0.001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/27:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/28:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate -= 0.001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/29:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/30:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/31:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/32:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0011
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/33:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/34: np.sqrt(0.9176**2 + 0.4**2)
97/35: np.sqrt(0.9175**2 + 0.4**2)
97/36: np.sqrt(0.9174**2 + 0.4**2)
97/37: np.sqrt(0.9172**2 + 0.4**2)
97/38: np.sqrt(0.9168**2 + 0.4**2)
97/39: np.sqrt(1 - 0.4**2)
97/40: np.sqrt(0.9165**2 + 0.4**2)
97/41:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    # if mu_z == 0.4:
    #     conjugate += 0.0011
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/42: np.sqrt(0.9164**2 + 0.4**2)
97/43: np.sqrt(0.91651**2 + 0.4**2)
97/44: 1 - np.sqrt(0.91651**2 + 0.4**2)
97/45:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),5)
    # if mu_z == 0.4:
    #     conjugate += 0.0011
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/46:
for i, _ in enumerate(muxout):
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/47: 1 - np.sqrt(0.9798**2 + 0.2**2)
97/48: 1 - np.sqrt(0.91652**2 + 0.4**2)
97/49:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy) > 1e-4:
        print(error)
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/50:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/51:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/52:
muxout = np.array(0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0)
muyout = np.array(0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804)
muzout = np.array(1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197)
97/53:
muxout = np.array([0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0])
muyout = np.array(0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804)
muzout = np.array(1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197)
97/54:
muxout = [0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0]
muyout = np.array(0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804)
muzout = np.array(1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197)
97/55:
muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
muyout = '0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804'
muzout = '1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197'
97/56:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/57:
muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
97/58:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/59:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),5)
    if mu_z == 0.4:
        conjugate += 0.0011
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/60:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
97/61:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
97/62:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
97/63:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
99/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
99/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
99/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
99/4:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
99/5: 1 - np.sqrt(0.91652**2 + 0.4**2)
99/6: np.sqrt(1 - 0.4**2)
99/7:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
99/8: # sav_data
99/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
99/10: !ls runs/Si_marcs_LTE_mus/
99/11: np.sqrt(0.6**2 + 0.7999**2)
99/12:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
99/13:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
99/14:
for mu_z in mu_zs:
    mu_z
99/15: linesobj[0]
99/16: linesobj[0].plot
99/17: linesobj[0].plot()
99/18: linesobj[0][0].plot()
99/19: linesobj[0].plot()
99/20: linesobj[0]
99/21: linesobj[2]
99/22: sav_data
99/23: sav_data[0]
99/24: sav_data
99/25: sav_data[0][0]
99/26: sav_data[:][0]
99/27: sav_data[0][0]
99/28: sav_data
99/29: sav_data['iag_sun']
99/30: sav_data['iag_sun'][0]
99/31: sav_data['iag_sun'][0][0]
99/32: sav_data['iag_sun']
99/33: sav_data['iag_sun'].mu
99/34: sav_data['iag_sun'].mu[0]
99/35: sav_data['iag_sun'].mu[0][0]
99/36: sav_data['iag_sun'].mu[0][1]
99/37: sav_data['iag_sun'].mu[0]
99/38: sav_data['iag_sun'].mu[0][:]
99/39: np.where(sav_data['iag_sun'].mu[0][:])==1
99/40: np.where(sav_data['iag_sun'].mu[0][:])==0.78
99/41: soldata = pd.DataFrame.from_dict(sav_data)
99/42:
soldata = pd.DataFrame.from_dict(sav_data)
soldata
99/43:
soldata = pd.DataFrame.from_dict(sav_data)
print(soldata)
99/44:
soldata = pd.DataFrame.from_dict(sav_data[''])
print(soldata)
99/45:
soldata = pd.DataFrame.from_dict(sav_data['iag_sun'])
print(soldata)
99/46:
soldata = pd.DataFrame.from_dict(sav_data['iag_sun'])
soldata
99/47: sav_data['iag_sun']
99/48:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]
99/49:
sav_data['iag_sun']
sav_data['iag_sun'].flux[0][0]
99/50:
sav_data['iag_sun']
sav_data['iag_sun'].flux[0][1]
99/51:
sav_data['iag_sun']
sav_data['iag_sun'].flux[0][2]
99/52:
sav_data['iag_sun']
sav_data['iag_sun'].flux[0]]
99/53:
sav_data['iag_sun']
sav_data['iag_sun'].flux[0]
99/54: sav_data['iag_sun']
99/55:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
99/56: sol_fluxes
99/57:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].lam[0][ang] for ang in sol_mu_ind]
99/58:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
99/59:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    # plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    # plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    # plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/60:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
99/61:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    # plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    # plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    # plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/62:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    # plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/63:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
100/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
100/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
100/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
100/4:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_run/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/', 'runs/Si_marcs_LTE_newf/output', 'runs/Si_stag_NLTE_5x5x230_newf/output']
labels = [ '1D LTE', '3D NLTE', '1D LTE new f val', '3D NLTE new f val']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
100/5:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
lam = sav_data['iag_sun'].wave[0][0]
flux = sav_data['iag_sun'].flux[0][0]
100/6:
# # Calc change between old and new f-value 1D LTE lines for line 1
# # old 1D:
# adj_factor = np.divide(linesobj[2][0].nflux, linesobj[0][0].nflux)
# adj_1DLTE = copy.deepcopy(linesobj[0][0])
# adj_1DLTE.nflux  = adj_1DLTE.nflux * adj_factor

# adj_3DNLTE = copy.deepcopy(linesobj[1][0])
# adj_3DNLTE.nflux = adj_3DNLTE.nflux * adj_factor
100/7: major_krs
100/8:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
100/9:
vac = np.array([7036.841], dtype=np.float64)

vacuum2obs(vac)
100/10: (10**(-1.63))/3
100/11:
plt.plot(lam, flux, linestyle='none', marker='.', zorder=1, label='solar spec')
plt.xlim(7034.7,7035.2)
100/12:
vac = np.array([7228.199], dtype=np.float64)

vacuum2obs(vac)
100/13:
d = {'lambda_atom Å': [7034.901,5645.613,5684.484, 5701.104,  5772.146, 7226.208],  'lambda paper(obs)Å': [7034.897, 564.5613, 5684.484, 5701.105, 5772.146, '-'], 
'e_up (atom)cm-1':[61563.305, 57468.238, 57541.918, 57295.883, 58311.660, 59110.891 ], 'g_up (atom)':[16,5, 3, 1, 1,5],
'e_low (atom)cm-1':[47351.555, 39760.285, 39955.055, 39760.285, 40991.883, 45276.188 ], 'g_low(atom)':[5,3, 5, 3, 3, 3], 'e_up(paper)cm-1':[61402, 57316, 57393, 57149, 58240,'-'], 
'e_low(paper)cm-1': [47292, 39720, 39910, 39720, 40969, '-']}
# 'e_diff(atom)cm-1': [14211.75], 'e_diff (paper) cm-1':[14210.923]}

#'lambda_M3Doutput Å': [7034.49], 'lambda paper(vac)Å': [7036.841],

df = pd.DataFrame(data=d)
df
100/14:
example_string = df.to_string()
output_file = open('line_comp.txt','a')
output_file.write(example_string)
output_file.close()
100/15:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
100/16: np.sqrt(1-0.8**2)
99/64:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/65: linesobj[0][0].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/66:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(j)
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/67:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(j, i)
        linesobj[j][i].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/68: linesobj[1][0].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/69: linesobj[1][1].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/70: linesobj[3][1].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/71: linesobj[0][3].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/72:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
99/73:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
99/74: linesobj[0][3].plot(qmax=3.5, lam0=m3d_centre_wavelengths[i])
99/75: linesobj[0][3].__dict__
99/76: linesobj[0][3].plot(qmax=3.5)
99/77:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(j, i)
        linesobj[j][i].plot(qmax=3.5)#, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/78:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(j, i)
        linesobj[j][i].plot(qmax=3.5)#, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/79:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(thiskr)
        linesobj[j][i].plot(qmax=3.5)#, lam0=m3d_centre_wavelengths[i])

    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/80:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/81:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])
    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/82:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    
    for j, run in enumerate(linesobj[:]):
        print(thiskr)
        linesobj[j][i].plot(qmax=3.5)#, lam0=m3d_centre_wavelengths[i])

    # plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    # plt.legend()

# plot adjusted 1D line

plt.tight_layout()
# plt.savefig('spec_comp.pdf')
99/83:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'Ansgar solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/84:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(17,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/85:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
99/86: fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))
99/87:
# take average of the intensity for each angle
linesobj[0][3].ang_file
99/88:
# take average of the intensity for each angle
linesobj[0][3].ang_file()
99/89:
# take average of the intensity for each angle
linesobj[0][3].ang_file(1)
99/90:
# take average of the intensity for each angle
linesobj[0][3].ang_file(0)
99/91:
# take average of the intensity for each angle
linesobj[0][3].ang_file(1)
99/92:
# take average of the intensity for each angle
linesobj[0][3].ang_file(2)
99/93:
# take average of the intensity for each angle
linesobj[0][3].ang_file(3)
99/94:
# take average of the intensity for each angle
linesobj[0][3].ang_file(4)
99/95:
# take average of the intensity for each angle
linesobj[0][3].ang_file(5)
99/96:
# take average of the intensity for each angle
linesobj[0][3].ang_file(:)
99/97:
# take average of the intensity for each angle
linesobj[0][3].ang_file(11)
99/98:
# take average of the intensity for each angle
linesobj[0][3].ang_file(33)
99/99:
# take average of the intensity for each angle
linesobj[0][3].ang_file(17)
99/100:
# take average of the intensity for each angle
linesobj[0][3].ang_file(16)
99/101:
# take average of the intensity for each angle
for i in range(17):
    print(linesobj[0][3].ang_file(16))
99/102:
# take average of the intensity for each angle
for i in range(17):
    print(linesobj[0][3].ang_file(i))
99/103:
# take average of the intensity for each angle
for i in range(17):
    print(linesobj[0][0].ang_file(i))
99/104:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
99/105:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux(qmax=3.5)]
for i, _ in enumerate(sol_mu_ind):


for j in range(17):
    # print(linesobj[0][0].ang_file(i))
99/106:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux(qmax=3.5)]
for i, _ in enumerate(sol_mu_ind[-1]):
    print(_)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/107:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux(qmax=3.5)]
for i, _ in enumerate(sol_mu_ind[-1]):
    print(i)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/108:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux]
for i, _ in enumerate(sol_mu_ind[-1]):
    print(i)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/109: sol_mu_ind[-1]
99/110: sol_mu_ind[-1:]
99/111: sol_mu_ind[1:]
99/112:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux]
for i, _ in enumerate(sol_mu_ind[1;]):
    print(i)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/113:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux]
for i, _ in enumerate(sol_mu_ind[1:]):
    print(i)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/114:
# take average of the intensity for each angle
sim_fluxes = [linesobj[0][0].nflux]
for i, _ in enumerate(sol_mu_ind[1:]):
    print(_)
    # for j in range(17):
        # print(linesobj[0][0].ang_file(i))
99/115: linesobj[0][0].nflux
99/116: linesobj[0][0].nflux(ang=1)
102/1:
ang=1
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
102/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
102/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
102/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
102/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
102/7: sav_data['iag_sun']
102/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
102/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
102/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
102/11: linesobj[0][3].__dict__
102/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
102/13:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind):
        ang=i
        ang_idx = (ang-1)*4+1
        intensity = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/14:
ang=1
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/15: intensity
102/16: np.shape(intensity)
102/17:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/18:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/19: get_ang_intensity(runobjects[0], kr=286)
102/20:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    for i, _ in enumerate(sol_mu_ind):
        print(i)
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/21:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    for i, _ in enumerate(sol_mu_ind):
        print(i)
        ang=i + 1
        ang_idx = (ang-1)*4+1
        # sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/22: get_ang_intensity(runobjects[0], kr=286)
102/23:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        print(i)
        ang=i + 1
        ang_idx = (ang-1)*4+1
        # sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/24: get_ang_intensity(runobjects[0], kr=286)
102/25:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        # sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/26: get_ang_intensity(runobjects[0], kr=286)
102/27:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        print(sim_fluxes[i])
        # sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/28:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/29: get_ang_intensity(runobjects[0], kr=286)
102/30:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        print(sim_fluxes[i-1])
        # sim_fluxes[i] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/31: get_ang_intensity(runobjects[0], kr=286)
102/32:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes[i-1] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/33:
def get_ang_intensity(run, kr):
    sim_fluxes = np.empty(len(sol_mu_ind)-1)
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes[ang] = np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1)
102/34: get_ang_intensity(runobjects[0], kr=286)
102/35:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
102/36:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/37: get_ang_intensity(runobjects[0], kr=286)
102/38: print(get_ang_intensity(runobjects[0], kr=286))
102/39:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    print(sim_fluxes)
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
102/40:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind):
        ang=i + 1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
102/41: print(get_ang_intensity(runobjects[0], kr=286))
102/42: get_ang_intensity(runobjects[0], kr=286)
102/43:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind):
        ang=i
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
102/44: get_ang_intensity(runobjects[0], kr=286)
102/45:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
102/46:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/47: get_ang_intensity(runobjects[0], kr=286)
102/48:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
102/49:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
102/50: get_ang_intensity(runobjects[0], kr=286)
102/51: test_int = get_ang_intensity(runobjects[0], kr=286)
104/1:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(runobjects[0].lam)
104/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
104/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
104/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
104/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
104/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
104/7: sav_data['iag_sun']
104/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
104/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
104/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
104/11: linesobj[0][3].__dict__
104/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
104/13:
def get_ang_intensity(run, kr):
    sim_fluxes = []
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
104/14:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
104/15: test_int = get_ang_intensity(runobjects[0], kr=286)
104/16:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(runobjects[0].lam)
104/17:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(runobjects[0].lam[286])
104/18:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(linesobj[0][0].lam)
104/19:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(linesobj[0][0].lam, sim_fluxes[i])
104/20:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(mu_zs):
    ax[i].plot(linesobj[0][0].lam, test_int[i])
104/21:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind:
    ax[i].plot(linesobj[0][0].lam, test_int[i])
104/22:
fig, ax = plt.subplots(len(mu_zs), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, test_int[i])
104/23:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, test_int[i])
104/24:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

linesobj[0][0].plot(qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i], ax=ax[0])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/25:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

linesobj[0][0].plot(qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/26:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

linesobj[0][1].plot(qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/27:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].lam, linesobj[0][0].flux, ang=1) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/28:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].lam, linesobj[0][0].flux(ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/29:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/30:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/31:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind[:-1]):

    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/32:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind[:-1]):
    print(i)
    ax[i+1].plot(linesobj[0][0].lam, test_int[i+1])
104/33: test_int
104/34: len(test_int)
104/35:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind[:-1]):
    print(i)
    ax[i+1].plot(linesobj[0][0].lam, test_int[0])# , test_int[i+1])
104/36:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind[:-1]):
    print(i)
    ax[i+1].plot(linesobj[0][0].lam, test_int[i])
104/37:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr]].i3[:,1]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
104/38:
ang=0
ang_idx = (ang-1)*4+1
intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
104/39: test_int = get_ang_intensity(runobjects[0], kr=286)
104/40:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
104/41: test_int = get_ang_intensity(runobjects[0], kr=286)
104/42: len(test_int)
104/43:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

# ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind[:-1]):
    print(i)
    ax[i+1].plot(linesobj[0][0].lam, test_int[i])
104/44:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

# ax[0].plot(linesobj[0][0].crop(qmax =3.5, ang=1)) #qmax=3.5, ang=1, lam0=m3d_centre_wavelengths[i])

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, test_int[i])
104/45:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
104/46: sav_data['iag_sun'].mu
104/47: sav_data['iag_sun'].mu[0]
104/48: sav_data['iag_sun'].mu[0][0]
104/49:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, test_int[i], label=f'{sav_data['iag_sun'].mu[0][i]}')
104/50:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
104/51: sol_mus
104/52:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, test_int[i], label=sol_mus[i])
104/53: sim_int = get_ang_intensity(runobjects[0], kr=286)
104/54:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i])
104/55:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i]) 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100)#, label=f'IAG solar spec mu_z={mu_zs[k]}')
104/56:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i]) 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100)#, label=f'IAG solar spec mu_z={mu_zs[k]}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
104/57:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i]) 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100)#, label=f'IAG solar spec mu_z={mu_zs[k]}')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
104/58:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    print(i)
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i]) 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/59:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=sol_mus[i]) 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/60:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int[i], label=f'1D LTE mu') 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/61:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, np.norm(sim_int[i]), label=f'1D LTE mu') 
    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/62:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, np.norm(sim_int_1d[i]), label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, np.norm(sim_int_3d[i]), label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/63:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/64:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
104/65:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/66:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d / continuum(linesobj[0][0].lam, sim_int_1d)
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
104/67:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d / continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
104/68:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/69:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d / continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d / continuum(linesobj[0][0].lam, np.array(sim_int_3d))
104/70:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
104/71:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
106/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
106/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
106/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
106/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
106/6: sav_data['iag_sun']
106/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
106/8: sol_mus
106/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
106/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
106/11: linesobj[0][3].__dict__
106/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
106/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
106/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
106/15:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
106/16:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/17:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
106/18:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(linesobj[0][0].lam, sim_int_1d)
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
106/19:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
106/20:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/21: np.shape(linesobj)
106/22:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3_norm = sim_int_3d/continuum(linesobj[1][0].lam, np.array(sim_int_3d))
106/23:
sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d/continuum(linesobj[1][0].lam, np.array(sim_int_3d))
106/24:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
    
    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/25:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[i]}, mu = {sol_mus[i]})
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/26:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[i]}, mu = {sol_mus[i]}'')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/27:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[i]}, mu = {sol_mus[i]}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/28:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[i]}, mu = {sol_mus[i]:2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/29:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[i]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/30:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(linesobj[0][0].lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(linesobj[0][0].lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/31:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][0].lam 
line_lam += m3d_centre_wavelengths[0] - linesobj[0][0].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(linesobj[0][0].lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d/continuum(linesobj[1][0].lam, np.array(sim_int_3d))
106/32:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][0].lam 
line_lam += m3d_centre_wavelengths[0] - linesobj[0][0].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
106/33:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][0].lam 
line_lam += m3d_centre_wavelengths[0] - linesobj[0][0].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
106/34:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][0].lam 
line_lam += m3d_centre_wavelengths[0] - linesobj[0][0].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
106/35:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.legend()
106/36:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.ylim(0.4,1.1)
    plt.legend()
106/37:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
    plt.ylim(0.4,1.05)
    plt.legend()
106/38:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE mu')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE mu') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.3), (m3d_centre_wavelengths[0]+0.3))
    plt.ylim(0.4,1.05)
    plt.legend()
106/39:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.3), (m3d_centre_wavelengths[0]+0.3))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
106/40:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.25), (m3d_centre_wavelengths[0]+0.25))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
106/41:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D LTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.25), (m3d_centre_wavelengths[0]+0.25))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
fig.savefig('line1_mudep.pdf')
106/42:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[0]-0.25), (m3d_centre_wavelengths[0]+0.25))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
fig.savefig('line1_mudep.pdf')
106/43: # linesobj[0][3].__dict__
106/44: linesobj[0][0]
106/45: np.shape(linesobj[0][0])
106/46: np.shape(linesobj[0][0].lam)
106/47: np.shape(linesobj)
106/48:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[0] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=286)
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=286)
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/49: plot_mu_intensities(0)
106/50: plot_mu_intensities(1)
106/51:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[0] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[0]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/52: plot_mu_intensities(1)
106/53: plot_mu_intensities(0)
106/54: major_krs[0]
106/55:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[0] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/56: plot_mu_intensities(0)
106/57: plot_mu_intensities(1)
106/58: plot_mu_intensities(2)
106/59:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/60: plot_mu_intensities(2)
106/61:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        # plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/62: plot_mu_intensities(2)
106/63:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/64: plot_mu_intensities(2)
106/65: np.shape(runobjects)
106/66:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][3].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][3].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[3])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[3])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
106/67:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[3]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[3]-0.25), (m3d_centre_wavelengths[3]+0.25))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
106/68: plot_mu_intensities(3)
106/69: plot_mu_intensities(4)
106/70: plot_mu_intensities(5)
106/71: plot_mu_intensities(2)
106/72:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
106/73:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
106/74: plot_mu_intensities(1)
106/75: plot_mu_intensities(3)
106/76: linesobj[0][1].plot9
106/77: linesobj[0][1].plot()
106/78: plot_mu_intensities(1)
106/79:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/80:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
106/81: wavelengths
106/82:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    # plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    plt.xlim(5567,5569)
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
106/83:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    # plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    plt.xlim(5567,5569)
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
106/84:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
106/85: plot_mu_intensities(2)
106/86: linesobj[0][2].plot()
106/87: linesobj[0][2].plot(lam0=5701.10)
106/88: linesobj[0][2].__dict__
107/1:
vac = np.array([5701], dtype=np.float64)

vacuum2obs(vac)
107/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
107/3:
vac = np.array([5701], dtype=np.float64)

vacuum2obs(vac)
107/4:
vac = np.array([5701], dtype=np.float64)

vacuum2obs(vac)
111/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
111/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
111/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
111/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
111/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
111/6: sav_data['iag_sun']
111/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
111/8: sol_mus
111/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
111/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
111/11: # linesobj[0][3].__dict__
111/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
111/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
111/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
111/15: np.shape(runobjects)
111/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.4,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
111/17: wavelengths
111/18: linesobj[0][2].__dict__
111/19: plot_mu_intensities(2)
111/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
111/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
111/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
111/23: plot_mu_intensities(1)
111/24:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
111/25: # wavelengths
111/26: # linesobj[0][2].__dict__
111/27:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
111/28: plot_mu_intensities(1)
111/29: plot_mu_intensities(0)
111/30: plot_mu_intensities(2)
111/31: plot_mu_intensities(3)
111/32: plot_mu_intensities(4)
111/33: plot_mu_intensities(5)
111/34: plot_mu_intensities(6)
111/35: plot_mu_intensities(0)
111/36: plot_mu_intensities(1)
111/37: plot_mu_intensities(2)
112/1:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
112/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
112/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
112/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
112/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
112/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
112/7: sav_data['iag_sun']
112/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
112/9: sol_mus
112/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
112/11:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
112/12: # linesobj[0][3].__dict__
112/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
112/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
112/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
112/16: np.shape(runobjects)
112/17:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = linesobj[0][line_ind].lam 
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
112/18: # wavelengths
112/19: linesobj[0][2].__dict__
112/20: plot_mu_intensities(2)
112/21:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
112/22:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
112/23:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
112/24: plot_mu_intensities(2)
112/25: linesobj[0][2].__dict__
112/26:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
112/27: # wavelengths
112/28: linesobj[0][2].__dict__
113/1: plot_mu_intensities(2)
113/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
113/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
113/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
113/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
113/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
113/7: sav_data['iag_sun']
113/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
113/9: sol_mus
113/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
113/11:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
113/12: # linesobj[0][3].__dict__
113/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
113/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
113/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
113/16: np.shape(runobjects)
113/17:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.25), (m3d_centre_wavelengths[line_ind]+0.25))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/18: # wavelengths
113/19: linesobj[0][2].__dict__
113/20: plot_mu_intensities(2)
113/21:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
113/22:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
113/23:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
113/24: plot_mu_intensities(2)
113/25: plot_mu_intensities(3)
113/26:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
113/27: plot_mu_intensities(3)
113/28: plot_mu_intensities(2)
113/29:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-100), (m3d_centre_wavelengths[line_ind]+100))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/30: # wavelengths
113/31: linesobj[0][2].__dict__
113/32: plot_mu_intensities(2)
113/33: plot_mu_intensities(3)
113/34:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+10))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/35: # wavelengths
113/36: linesobj[0][2].__dict__
113/37: plot_mu_intensities(3)
113/38: plot_mu_intensities(2)
113/39: linesobj[0][2].__dict__
113/40:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+100))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/41: plot_mu_intensities(2)
113/42:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+120))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/43: plot_mu_intensities(2)
113/44:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+150))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
113/45: plot_mu_intensities(2)
114/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
114/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
114/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
114/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
114/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
114/6: sav_data['iag_sun']
114/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
114/8: sol_mus
114/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
114/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
114/11: # linesobj[0][3].__dict__
114/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
114/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
114/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
114/15: np.shape(runobjects)
114/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+150))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
114/17: # wavelengths
114/18: linesobj[0][2].__dict__
114/19: plot_mu_intensities(2)
114/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
114/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
114/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
114/23: plot_mu_intensities(2)
114/24: plot_mu_intensities(2)
114/25: plot_mu_intensities(2)
114/26: plot_mu_intensities(2)
114/27: plot_mu_intensities(3)
114/28: plot_mu_intensities(2)
114/29:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    print(line_lam[0])
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0
    print(line_lam[0], m3d_centre_wavelengths[line_ind], linesobj[0][line_ind].lam0)

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+150))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
114/30: # wavelengths
114/31: linesobj[0][2].__dict__
114/32: plot_mu_intensities(2)
114/33: plot_mu_intensities(2)
114/34: line_lam
115/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
115/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
115/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
115/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
115/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
115/6: sav_data['iag_sun']
115/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
115/8: sol_mus
115/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
115/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
115/11: # linesobj[0][3].__dict__
115/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
115/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
115/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
115/15: np.shape(runobjects)
115/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-10), (m3d_centre_wavelengths[line_ind]+150))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
115/17: # wavelengths
115/18: linesobj[0][2].__dict__
115/19: plot_mu_intensities(2)
115/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
115/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
115/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
115/23:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-3.5), (m3d_centre_wavelengths[line_ind]+3.5))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
115/24:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-3.5), (m3d_centre_wavelengths[line_ind]+3.5))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
115/25: # wavelengths
115/26: linesobj[0][2].__dict__
115/27: linesobj[0][0].__dict__
116/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
116/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
116/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
116/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
116/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
116/6: sav_data['iag_sun']
116/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
116/8: sol_mus
116/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
116/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
116/11: # linesobj[0][3].__dict__
116/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
116/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
116/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
116/15: np.shape(runobjects)
116/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-3.5), (m3d_centre_wavelengths[line_ind]+3.5))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/17: # wavelengths
116/18: linesobj[0][0].__dict__
116/19: plot_mu_intensities(2)
116/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
116/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
116/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
116/23:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/24: # wavelengths
116/25: linesobj[0][0].__dict__
116/26: plot_mu_intensities(2)
116/27: plot_mu_intensities(3)
116/28: plot_mu_intensities(0)
116/29: plot_mu_intensities(1)
116/30: plot_mu_intensities(2)
116/31: plot_mu_intensities(4)
116/32: plot_mu_intensities(0)
116/33:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/34: # wavelengths
116/35: linesobj[0][0].__dict__
116/36: plot_mu_intensities(0)
116/37:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 
        ax[i].plot(*convol(line_lam, sim_int_3d_norm[i], zeta_rt=3), label=f'3D NLTE conv')

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/38:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 
        ax[i].plot(*convol(line_lam, sim_int_3d_norm[i], zeta_rt=3), label=f'3D NLTE conv')

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/39: # wavelengths
116/40: # linesobj[0][0].__dict__
116/41: plot_mu_intensities(0)
116/42: plot_mu_intensities(2)
116/43:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/44: # wavelengths
116/45: # linesobj[0][0].__dict__
116/46: plot_mu_intensities(2)
116/47: plot_mu_intensities(0)
116/48:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.27), (m3d_centre_wavelengths[line_ind]+0.27))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/49: plot_mu_intensities(0)
116/50:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.22), (m3d_centre_wavelengths[line_ind]+0.22))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/51: # wavelengths
116/52: # linesobj[0][0].__dict__
116/53: plot_mu_intensities(0)
116/54:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3 ), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.22), (m3d_centre_wavelengths[line_ind]+0.22))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
116/55: # wavelengths
116/56: # linesobj[0][0].__dict__
116/57: plot_mu_intensities(0)
116/58:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3 ), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.22), (m3d_centre_wavelengths[line_ind]+0.22))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    fig.savefig('line1_conv.pdf')
116/59: # wavelengths
116/60: # linesobj[0][0].__dict__
116/61: plot_mu_intensities(0)
116/62:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3 ), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.22), (m3d_centre_wavelengths[line_ind]+0.22))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_conv.pdf')
119/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
119/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
119/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
119/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
119/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
119/6: sav_data['iag_sun']
119/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
119/8: sol_mus
119/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
119/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
119/11: # linesobj[0][3].__dict__
119/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
119/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
119/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
119/15: np.shape(runobjects)
119/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with convolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
119/17: # wavelengths
119/18: # linesobj[0][0].__dict__
119/19: plot_mu_intensities(0)
119/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
119/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
119/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
121/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
121/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
121/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
121/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
121/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
121/6: sav_data['iag_sun']
121/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
121/8: sol_mus
121/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
121/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
121/11: # linesobj[0][3].__dict__
121/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
121/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
121/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
121/15: np.shape(runobjects)
121/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
121/17: # wavelengths
121/18: # linesobj[0][0].__dict__
121/19: plot_mu_intensities(0)
121/20:
# define the wavelength range for this line with the m3d central wavelenght:
line_lam = linesobj[0][2].lam 
line_lam += m3d_centre_wavelengths[3] - linesobj[0][2].lam0

sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[2])
sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[2])
sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))
121/21:
fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(20,29))

for i, mu in enumerate(sol_mu_ind):
    ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
    ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

    
    ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

    
    plt.sca(ax[i])
    plt.title(f'Line = {m3d_centre_wavelengths[2]}, mu = {sol_mus[i]:.2f}')
    plt.xlim((m3d_centre_wavelengths[2]-0.25), (m3d_centre_wavelengths[2]+0.25))
    
    plt.ylim(0.4,1.05)
    plt.ylabel('Normalised Intensity')
    plt.xlabel('λ (Å)')
    plt.legend()
# fig.savefig('line1_mudep.pdf')
121/22:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(20,29))
for i, thiskr in enumerate(major_krs):
    plt.sca(ax[i])

    # ax[i].plot(lam, flux, linestyle='none', marker='.', zorder=100, label='Ansgar solar spec')
    # ax[i].plot(obs_spec2[:,0], obs_spec2[:,1], label='kpno spec', marker='D')

    # adj_3DNLTE.plot(qmax=3.5, label='adjusted 3D NLTE', marker='o')
    # plt.plot(adj_3DNLTE.lam, adj_3DNLTE.nflux, label='adjusted 3D NLTE', marker='o')

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)
    for j, run in enumerate(linesobj[:]):
        linesobj[j][i].plot(qmax=3.5, label=labels[j], lam0=m3d_centre_wavelengths[i])


    for k, mu_z in enumerate(mu_zs):
        ax[i].plot(sol_lams[k], sol_fluxes[k], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec mu_z={mu_zs[k]}')


    plt.legend()

# plot adjusted 1D line

plt.tight_layout()
plt.savefig('spec_comp.pdf')
125/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
125/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
125/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
125/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
125/5: wavelengths = [line.lambda0 for line in linesobj[0]]
125/6: wavelengths
125/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
125/8: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
125/9:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
125/10: LTE_runs = 'runs/Si_marcs_LTE_dir/'
125/11: test_cog = CoG(runs=LTE_runs, lines=major_krs)
125/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
125/13:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
125/14:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.53, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
126/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
126/2:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
126/3:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
126/4:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
126/5:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
126/6: sav_data['iag_sun']
126/7:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
126/8: sol_mus
126/9:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
126/10:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
126/11: # linesobj[0][3].__dict__
126/12:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
126/13:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
126/14:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
126/15:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
126/16: # wavelengths
126/17: # linesobj[0][0].__dict__
126/18: plot_mu_intensities(0)
126/19: # sav_data['iag_sun']
126/20:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
126/21:
muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
126/22:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
126/23:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = :',*muxout)
print('muyout = :',*muyout)
print('muzout = :',*muzout)
126/24:
for i, _ in enumerate(muxout):
    dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
    if np.abs(dummy - 1e0) > 1e-4:
        print('error')
    print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
126/25: major_krs
126/26:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
126/27:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
plt.ylim(0.35,1.05)
plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
126/28:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
plt.ylim(0.55,1.05)
plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
126/29:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import simpson
126/30:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
126/31: integrate.simpson(y=sol_fluxes[0], x=sol_lams[0])
126/32: integrate.simps(y=sol_fluxes[0], x=sol_lams[0])
126/33: sol_lam0_test = sol_lams[0][sol_lams[0] > 5645.5 & sol_lams[0] < 5645.8]
126/34: sol_lams[0] > 5645.5
126/35: sol_lams[0] > 5645.5 & sol_lams[0] < 5645.8
126/36: sol_lams[0] > 5645.5 && sol_lams[0] < 5645.8
126/37: sol_lams[0] > 5645.5  and  sol_lams[0] < 5645.8
126/38: sol_lam0_test = sol_lams[0][sol_lams[0] > 5645.5 and sol_lams[0] < 5645.8]
126/39: sol_lam0_test = sol_lams[0][(sol_lams[0] > 5645.5) and (sol_lams[0] < 5645.8)]
126/40: sol_lam0_test = sol_lams[0][np.where((sol_lams[0] > 5645.5) and (sol_lams[0] < 5645.8))]
126/41: sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.8))]
126/42:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.8))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.8))]
126/43: plt.plot(sol_lam0_test, sol_flux0_test)
126/44:
line0_min, line0_max = 5645.5, 5645.8
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.8))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.8))]
126/45:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.7))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.7))]
126/46: plt.plot(sol_lam0_test, sol_flux0_test)
126/47:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
126/48: plt.plot(sol_lam0_test, sol_flux0_test)
126/49:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
126/50: integrate.simps(y=sol_fluxes[0], x=sol_lams[0])
126/51: integrate.simps(y=sol_flux0_test, x=sol_lam0_test)
126/52: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test)
126/53: plt.plot(sol_lam0_test, 1-sol_flux0_test)
126/54: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
126/55: iag_int_lims = np.array((5645.5, 5645.75),(5645.5, 5645.75))
126/56: iag_int_lims = np.array([5645.5, 5645.75],[5645.5, 5645.75])
126/57: help np.array
126/58: help(np.array)
126/59: iag_int_lims = np.array([[5645.5, 5645.75],[5645.5, 5645.75]])
126/60: plot_mu_intensities(1)
126/61:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
126/62:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
126/63:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
126/64: sol_lams[0][argrelextrema(sol_fluxes[0], np.greater]
126/65: sol_lams[0][argrelextrema(sol_fluxes[0], np.greater)]
126/66: from scipy.signal import find_peaks
126/67:
x = -1*sol_fluxes[0]
peaks, _ = find_peaks(x, height=0)
plt.plot(x)
126/68: sol_lams[0][argrelextrema(sol_fluxes[0], np.greater)].max
126/69: sol_lams[0][argrelextrema(sol_fluxes[0], np.greater)].max()
126/70: plot_mu_intensities(0)
126/71: plot_mu_intensities(1)
126/72: plot_mu_intensities(0)
126/73:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.55), (m3d_centre_wavelengths[line_ind]+0.55))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
126/74: # wavelengths
126/75: # linesobj[0][0].__dict__
126/76: plot_mu_intensities(0)
126/77:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
126/78: # wavelengths
126/79: # linesobj[0][0].__dict__
126/80: plot_mu_intensities(0)
126/81: plot_mu_intensities(1)
126/82: plot_mu_intensities(2)
126/83: plot_mu_intensities(2)
126/84: plot_mu_intensities(3)
126/85: plot_mu_intensities(4)
126/86: plot_mu_intensities(5)
126/87:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
126/88:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
iag_int_lims
126/89:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
iag_int_lims[1,1]
126/90: iag_int_lims
126/91:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
iag_int_lims[1,2]
126/92:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
iag_int_lims[2,1]
126/93: iag_int_lims[0]
126/94:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_fluxes[j] > line_lammin), (sol_fluxes[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
126/95:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        print(len(lam_range))
        intensity_range = sol_fluxes[j][np.logical_and((sol_fluxes[j] > line_lammin), (sol_fluxes[j] < line_lammax))]
        print(len(intensity_range))
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
126/96:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        print(len(lam_range))
        intensity_range = sol_fluxes[j][np.logical_and((sol_fluxes[j] > line_lammin), (sol_fluxes[j] < line_lammax))]
        print(intensity_range)
        print(len(intensity_range))
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
126/97:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        print(len(lam_range))
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        print(intensity_range)
        print(len(intensity_range))
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
126/98:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
126/99: eq_iag
126/100: plot_mu_intensities(1)
126/101: plt.plot(mu_zs)
126/102: plt.plot(mu_zs, eq_iag[0]
126/103: plt.plot(mu_zs, eq_iag[0])
126/104:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]
sol_mus = [1, 0.8, 0.6, 0.4, 0.2]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
126/105:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
126/106: sol_mus
126/107: plt.plot(sol_mus, eq_iag[0])
126/108: plt.plot(sol_mus, eq_iag[0]), marker='x'
126/109: plt.plot(sol_mus, eq_iag[0], marker='x')
126/110: plt.scatter(sol_mus, eq_iag[0], marker='x')
126/111:
fig, ax = plt.subplots(len(major_krs)/2, len(major_krs)/2, figsize=(10,10))
for i, line in enumerate(major_krs)
    ax[i].scatter(sol_mus, eq_iag[i], marker='x')
126/112:
fig, ax = plt.subplots(len(major_krs)/2, len(major_krs)/2, figsize=(10,10))
for i, line in enumerate(major_krs):
    ax[i].scatter(sol_mus, eq_iag[i], marker='x')
126/113:
fig, ax = plt.subplots(3,3, figsize=(10,10))
for i, line in enumerate(major_krs):
    ax[i].scatter(sol_mus, eq_iag[i], marker='x')
126/114:
fig, ax = plt.subplots(3,3, figsize=(10,10))
for i, line in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/115:
fig, ax = plt.subplots(3,3, figsize=(10,10))
for i, line in enumerate(major_krs):
    ax[i,i].plot(sol_mus, eq_iag[i], marker='x')
126/116:
fig, ax = plt.subplots(3,3, figsize=(10,10), sharex=True)
for i, line in enumerate(major_krs):
    ax.plot(sol_mus, eq_iag[i], marker='x')
126/117:
fig, ax = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, line in enumerate(major_krs):
    ax.plot(sol_mus, eq_iag[i], marker='x')
126/118:
fig, ax = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, line in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/119:
fig, ax = plt.subplots(3,3, figsize=(10,10),squeeze=True)
np.flatten(ax)
for i, line in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/120:
fig, ax = plt.subplots(3,3, figsize=(10,10),squeeze=True)
ax.ravel
for i, line in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/121:
fig, ax = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, line in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/122:
fig, axes = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, ax in enumerate(axes.flat):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/123:
fig, axes = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, ax in enumerate(axes.flat):
    plt.plot(sol_mus, eq_iag[i], marker='x',ax=ax)
126/124:
fig, axes = plt.subplots(3,3, figsize=(10,10),squeeze=True)
for i, ax in enumerate(axes.flat):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/125:
fig, ax = plt.subplots(6 figsize=(10,10),squeeze=True)
for i, ax in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/126:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, ax in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/127:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, ax in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[0], marker='x')
126/128:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, ax in enumerate(major_krs):
    ax[0].plot(sol_mus, eq_iag[i], marker='x')
126/129:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, ax in enumerate(major_krs):
    ax.plot(sol_mus, eq_iag[i], marker='x')
126/130:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[0].plot(sol_mus, eq_iag[i], marker='x')
126/131:
fig, ax = plt.subplots(6, figsize=(10,10),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/132:
fig, ax = plt.subplots(6, figsize=(15,10),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/133:
fig, ax = plt.subplots(6, figsize=(10,15),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
126/134:
fig, ax = plt.subplots(6, figsize=(10,15),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].xlabel('mu')
    ax[i].ylabel('Eq. width, mÅ')
126/135:
fig, ax = plt.subplots(6, figsize=(10,15),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
126/136:
fig, ax = plt.subplots(6, figsize=(10,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
126/137:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
126/138:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths}')
126/139:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
126/140:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout
126/141:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
pfiglt.tight_layout
126/142:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
fig.tight_layout
126/143:
fig, ax = plt.subplots(6, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/144:
fig, ax = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/145:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for i, _ in enumerate(major_krs):
    axs.flatten()
    axs[i].plot(sol_mus, eq_iag[i], marker='x')
    axs[i].set_xlabel('mu')
    axs[i].set_ylabel('Eq. width, mÅ')
    axs[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/146:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten())
    axs.flatten()
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/147:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten()):
    axs.flatten()
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/148:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten()):
    ax[i].plot(sol_mus, eq_iag[i], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/149:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten()):
    ax[i].plot(sol_mus, eq_iag[0], marker='x')
    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Eq. width, mÅ')
    ax[i].set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/150:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten()):
    ax.plot(sol_mus, eq_iag[], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/151:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(eq_iag[:,], axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/152: eq_iag[:,]
126/153: eq_iag[:]
126/154:
fig, axs = plt.subplots(3,3, figsize=(5,24),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/155:
fig, axs = plt.subplots(3,3, figsize=(15,24),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/156:
fig, axs = plt.subplots(3,2, figsize=(15,24),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/157:
fig, axs = plt.subplots(2,3, figsize=(15,24),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/158:
fig, axs = plt.subplots(2,3, figsize=(20,20),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/159:
fig, axs = plt.subplots(2,3, figsize=(15,20),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/160:
fig, axs = plt.subplots(2,3, figsize=(25,20),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/161:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/162:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], marker='o')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/163:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col], linestyle='o')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/164: help(plt.plot)
126/165:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col],'o')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/166:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col],'x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/167:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col],'rx')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/168:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col],'r-x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/169:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/170:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):
    print(col)
    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[i]}')
plt.tight_layout()
126/171:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
126/172:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
plt.savefig('IAG_ewq.pdf')
126/173:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
plt.savefig('plots/IAG_ewq.pdf')
126/174:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', markersize=15)
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
plt.savefig('plots/IAG_ewq.pdf')
127/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
128/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
128/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
128/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
128/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
129/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
129/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
129/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
129/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
129/5: wavelengths = [line.lambda0 for line in linesobj[0]]
129/6: wavelengths
129/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
129/8: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
129/9:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
129/10: LTE_runs = 'runs/Si_marcs_LTE_dir/'
129/11: test_cog = CoG(runs=LTE_runs, lines=major_krs)
129/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
129/13:
def ax_text(i, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Abundance correction:': corrections[i]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
129/14:
# text = nice_string_output(d, extra_spacing=2, decimals=3)

fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
    ax_ab[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_text(i, ax_ab[i],  0.53, 0.25)
    ax_ab[i].legend()


plt.tight_layout()
plt.savefig('ab_cor.pdf')
127/2: plot_mu_intensities(1)
127/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
127/4:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
127/5:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
127/6:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
127/7:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
127/8: # sav_data['iag_sun']
127/9:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
127/10: sol_mus
127/11:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
127/12:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# # labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
127/13:
# wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
127/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
127/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
127/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
127/17:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
127/18:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
127/19:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
127/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
127/21:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
127/22: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
127/23:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
127/24:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
127/25: iag_int_lims[0]
127/26:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
127/27:
fig, axs = plt.subplots(2,3, figsize=(25,17),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
131/1:
from astropy.io import fits
from astropy import units as u
import numpy as np
from matplotlib import pyplot as plt
from astropy.visualization import quantity_support
quantity_support()  # for getting units on the axes below
131/2:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
131/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
131/4:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
131/5:
from os.path import dirname, join as pjoin

from astropy.io import fits
from astropy import units as u
import numpy as np
from matplotlib import pyplot as plt
from astropy.visualization import quantity_support
quantity_support()  # for getting units on the axes below
131/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
131/7:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav

from astropy.io import fits
from astropy import units as u
import numpy as np
from matplotlib import pyplot as plt
from astropy.visualization import quantity_support
quantity_support()  # for getting units on the axes below
131/8:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
132/1:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
132/2:
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav

from astropy.io import fits
from astropy import units as u
import numpy as np
from matplotlib import pyplot as plt
from astropy.visualization import quantity_support
quantity_support()  # for getting units on the axes below
132/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
132/4:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
132/5:
from specutils import Spectrum1D

spec = Spectrum1D(spectral_axis=sol_lams[0], flux=sol_fluxes[0])
133/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
135/1:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/2: # wavelengths
135/3: # linesobj[0][0].__dict__
135/4: plot_mu_intensities(1)
135/5:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
135/6:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
135/7:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
135/8:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
135/9:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
135/10: # sav_data['iag_sun']
135/11:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
135/12: sol_mus
135/13:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
135/14:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
133/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
133/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import pandas 
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
133/4:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import pandas as pd
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
133/5:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  



%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
137/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  




%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
137/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
137/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
137/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
135/15:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/16:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
135/17:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
135/18:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
135/19: # sav_data['iag_sun']
135/20:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
135/21: sol_mus
135/22:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
135/23:
# wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
135/24:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
135/25:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/26:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
135/27: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
135/28:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
135/29:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
135/30: iag_int_lims[0]
135/31:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
135/32:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/33:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
135/34:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')
135/35:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')

plt.savefig()
135/36:
fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, thiskr in enumerate(major_krs):
    plt.sca(ax_ab[i])
    test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')

plt.tight_layout()
135/37: test_cog.calc_weq
135/38: test_cog.calc_weq[0]
135/39: test_cog.calc_weq(major_krs[-1])
135/40:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/41:
ax[2,2].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))
# test_cog.calc_weq(major_krs[-1])
135/42:
ax[2].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))
# test_cog.calc_weq(major_krs[-1])
135/43:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
135/44:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
ax[2].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/45:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[2].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/46:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/47: # s/av_data['iag_sun']
135/48: sav_data['iag_sun']
135/49:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
135/50: sol_mus
135/51:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
135/52:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
135/53:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
135/54:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/55: # wavelengths
135/56: # linesobj[0][0].__dict__
135/57: plot_mu_intensities(1)
135/58:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
135/59:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
135/60: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
135/61:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
135/62:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
135/63: iag_int_lims[0]
135/64:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
135/65:
fig, axs = plt.subplots(2,3, figsize=(10,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/66:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/67: test_cog.runs
135/68:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs[:]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/69:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs]))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/70:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs])

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/71:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

# overplot the 1D LTE equivalent widths 
for run in test_cog.runs:
    axs[1,1].plot(sol_mus, run.calc_weq(major_krs))

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/72:
axs[2].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))
# test_cog.calc_weq(major_krs[-1])
135/73:
axs[1,1].plot(sol_mus, test_cog.calc_weq(major_krs[-2]))
# test_cog.calc_weq(major_krs[-1])
135/74:
ex_1d_eqw = [test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)]
test_cog.runs
135/75:
axs[1,1].plot(sol_mus, ex_1d_eqw)
# test_cog.calc_weq(major_krs[-1])
135/76:
for mueq in ex_1d_eqw:
    axs[1,1].plot(sol_mus, mueq)
# test_cog.calc_weq(major_krs[-1])
135/77:
for mueq in ex_1d_eqw:
    axs[1,1].plot(sol_mus, mueq[0])
# test_cog.calc_weq(major_krs[-1])
135/78:
ex_1d_eqw = [test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)]
ex_1d_eqw
135/79:
ex_1d_eqw = [test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)]
ex_1d_eqw.reshape(1,-1)
135/80:
ex_1d_eqw = [test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)]
ex_1d_eqw
135/81: ex_1d_eqw[1,1]
135/82: np.array(ex_1d_eqw)[1,1]
135/83:
ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)])
ex_1d_eqw
135/84: ex_1d_eqw[1,:]
135/85: ex_1d_eqw[:,1]
135/86:
for i, run in enumerate(ex_1d_eqw):
    
    axs[1,1].plot(sol_mus, mueq[:,i])
# test_cog.calc_weq(major_krs[-1])
135/87:
for i, run in enumerate(ex_1d_eqw):
    
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])
# test_cog.calc_weq(major_krs[-1])
135/88:
for i, run in enumerate(ex_1d_eqw):
    
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])
plt.show()
135/89:
for i, run in enumerate(ex_1d_eqw):
    
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])
fig.show()
135/90:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/91:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
135/92:
ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)])
ex_1d_eqw
135/93:
# fig_ab, ax_ab = plt.subplots(len(major_krs), 1, figsize=(10,17))


# for i, thiskr in enumerate(major_krs):
#     plt.sca(ax_ab[i])
#     test_cog.plot(thiskr, marker='x', interp=False, qmax=3.5, label='1D LTE')

# plt.tight_layout()
135/94: fig
135/95:
for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])
fig
135/96:
ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)])
# ex_1d_eqw
135/97:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/98:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i]/10e3)


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/99:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i]/1e3)


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/100:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
135/101:
ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5) for ang in range(6)])
ex_1d_eqw
135/102:
ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5, norm=True) for ang in range(6)])
ex_1d_eqw
135/103:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i])


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/104:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o')


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/105:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=test_cog.abnds[i])
fig.legend()

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/106:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))
fig.legend()

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/107:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)
for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))
fig.legend()

plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/108:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

for i, run in enumerate(ex_1d_eqw):
    axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/109: eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr], ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
135/110: eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
135/111:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
eqwidths_1dlte
135/112:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')

    ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/113: eqwidths_1dlte[0]
135/114: eqwidths_1dlte[-2]
135/115:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/116:
# ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5, norm=True) for ang in range(6)])
# ex_1d_eqw
135/117: eqwidths_1dlte[-2]
135/118:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
# eqwidths_1dlte
135/119:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/']#, 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
135/120: # linesobj[0][3].__dict__
135/121:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
135/122:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
135/123:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
135/124:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/125: # wavelengths
135/126: # linesobj[0][0].__dict__
135/127: plot_mu_intensities(1)
135/128:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    # sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    # sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        # ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/129: # wavelengths
135/130: # linesobj[0][0].__dict__
135/131: plot_mu_intensities(1)
135/132:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/133: plot_mu_intensities(1)
135/134: # sav_data['iag_sun']
135/135:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus)

        
    ax[i].legend()

plt.tight_layout()
135/136:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus)

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/137:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus)

    ax[i].xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    ax[i].ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/138:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus)

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/139:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus)

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/140:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[i])

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/141:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j])

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/142:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=10)

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/143:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.3,1.1)    
    ax[i].legend()

plt.tight_layout()
135/144:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

    plt.sca(ax[i])
    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/145:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    
    plt.sca(ax[i])
    # plot picked integration limits 
    plt.vlines(iag_int_lims[i,:])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/146:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    ax[i].vlines(iag_int_lims[i,:])
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/147:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    ax[i].axvline(iag_int_lims[i,:])
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/148:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/149:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/150:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid()
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/151:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')
    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/152:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/153:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/154:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', legend='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/155:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/156:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/157:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/158:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
135/159:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
135/160:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
135/161:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
135/162:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
135/163: # sav_data['iag_sun']
135/164:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
135/165: sol_mus
135/166:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
135/167:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
135/168: # linesobj[0][3].__dict__
135/169:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
135/170:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
135/171:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
135/172:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/173: # wavelengths
135/174: # linesobj[0][0].__dict__
135/175: plot_mu_intensities(1)
135/176:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
135/177:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
135/178: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
135/179:
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > 5645.5), (sol_lams[0] < 5645.75))]
135/180:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
135/181: iag_int_lims[0]
135/182:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
135/183:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
# eqwidths_1dlte
135/184:
# ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5, norm=True) for ang in range(6)])
# ex_1d_eqw
135/185:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
135/186:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
135/187: eq_iag[:]
135/188: plot_mu_intensities(4)
135/189:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')
        ax[i].axhline(1)

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
135/190: # wavelengths
135/191: # linesobj[0][0].__dict__
135/192: plot_mu_intensities(4)
135/193: plot_mu_intensities(5)
135/194: plot_mu_intensities(3)
135/195: plot_mu_intensities(1)
135/196: plot_mu_intensities(0)
135/197: plot_mu_intensities(2)
138/1:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='--.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
138/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
138/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
138/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
138/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
138/7: # sav_data['iag_sun']
138/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
138/9: sol_mus
138/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
138/11:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/']#, 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
138/12: # linesobj[0][3].__dict__
138/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
138/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
138/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
138/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
138/17: # wavelengths
138/18: # linesobj[0][0].__dict__
138/19: plot_mu_intensities(1)
138/20:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
138/21:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
138/22:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
138/23:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
138/24:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
138/25: # sav_data['iag_sun']
138/26:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
138/27: sol_mus
138/28:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
138/29:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/']#, 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
138/30: # linesobj[0][3].__dict__
138/31:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
138/32:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
138/33:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
138/34:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
138/35: # wavelengths
138/36: # linesobj[0][0].__dict__
138/37: plot_mu_intensities(1)
138/38:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
138/39: # linesobj[0][3].__dict__
138/40:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
138/41:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
138/42:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
138/43:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
138/44: # wavelengths
138/45: # linesobj[0][0].__dict__
138/46: plot_mu_intensities(1)
138/47:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
138/48:
line0_min, line0_max = 5645.5, 5645.75
sol_lam0_test = sol_lams[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
sol_flux0_test = sol_fluxes[0][np.logical_and((sol_lams[0] > line0_min), (sol_lams[0] < line0_max))]
138/49: integrate.simps(y=1-sol_flux0_test, x=sol_lam0_test) * 1000
138/50:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
138/51: iag_int_lims[0]
138/52:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/53:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
138/54:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(6)] for kr in major_krs])
# eqwidths_1dlte
138/55:
# ex_1d_eqw = np.array([test_cog.calc_weq(kr=major_krs[-2], ang=ang, qmax=3.5, norm=True) for ang in range(6)])
# ex_1d_eqw
138/56:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(ex_1d_eqw):

        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
138/57:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
138/58:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='--.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/59:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='-.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/60:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/61: line_lammin
138/62:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        lam_range_list.append(lam_range)
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/63: lam_range
138/64:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    lam_range_list.append(lam_range)
138/65: lam_range
138/66:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    print(lam_range[0])
    lam_range_list.append(lam_range)
138/67: lam_range_list
138/68:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    lam_range_list.append(lam_range)
138/69:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    # record the wavelengths considered in each line
    lam_range_list.append(lam_range)
138/70: sol_fluxes[0]
138/71: sol_fluxes[0].shape
138/72:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    # record the wavelengths considered in each line
    sol_lam_range_list.append(lam_range)
138/73: sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
138/74:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
np.where(sol_lams[0]==sol_lam_range_list)
138/75:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
np.where(sol_lams[0]==sol_lam_range_list, dtype=object)
138/76: sol_lam_range_list
138/77:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
np.where(sol_lams[0]==sol_lam_range_list[line] for line in sol_lam_range_list)
138/78: [line for line in sol_lam_range_list]
138/79: range(sol_lam_range_list)
138/80: range(len(sol_lam_range_list))
138/81:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
np.where(sol_lams[0]==sol_lam_range_list[line] for line in range(len(sol_lam_range_list)))
138/82:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
np.where([sol_lams[0]==sol_lam_range_list[line] for line in range(len(sol_lam_range_list))])
138/83:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
for i in len(sol_lam_range_list):

    np.where([sol_lams[0]==sol_lam_range_list[i])
138/84:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
for i in len(sol_lam_range_list):

    np.where(sol_lams[0]==sol_lam_range_list[i])
138/85:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
for i in range(len(sol_lam_range_list)):

    np.where(sol_lams[0]==sol_lam_range_list[i])
138/86:
# sol_fluxes[0][sol_lams[0]==sol_lam_range_list]
for i in range(len(sol_lam_range_list)):

    np.where(sol_lams[-1]==sol_lam_range_list[i])
138/87:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = []
sol_int_range_list = []
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
    # record the wavelengths and intensities corresponding to each line
    sol_lam_range_list.append(lam_range)
    sol_int_range_list.append(intensity_range)
138/88:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = [sol_int_range_list[i]/continuum(sol_lam_range_list[i], sol_int_range_list[i]) for i in range(len(major_krs))]
138/89: sol_int_renorm
138/90:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
138/91:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(lam_range)
        # record the wavelengths and intensities corresponding to each line
        # sol_lam_range_list[i,j] = lam_range
        # sol_int_range_list[i,j] = intensity_range
138/92:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range)
        # record the wavelengths and intensities corresponding to each line
        # sol_lam_range_list[i,j] = lam_range
        # sol_int_range_list[i,j] = intensity_range
138/93:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range[0:10])
        # record the wavelengths and intensities corresponding to each line
        # sol_lam_range_list[i,j] = lam_range
        # sol_int_range_list[i,j] = intensity_range
138/94:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range.shape)
        # record the wavelengths and intensities corresponding to each line
        # sol_lam_range_list[i,j] = lam_range
        # sol_int_range_list[i,j] = intensity_range
138/95:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range.shape)
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
138/96:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)))
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range.shape)
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
138/97:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        print(i,j, lam_range.shape)
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
138/98:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
138/99: sol_lam_range_list
138/100: sol_lam_range_list.shape
138/101:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j]
138/102:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
138/103:
# replot with new normalisation
fig, ax = plt.subplots(len(renorm_lines_indx), 1, figsize=(15,20))

for i, line_i in enumerate(renorm_lines_indx):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[line_i,j], sol_int_range_list[line_i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    # plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/104:
# replot with new normalisation
fig, ax = plt.subplots(len(renorm_lines_indx), 1, figsize=(8,20))

for i, line_i in enumerate(renorm_lines_indx):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[line_i,j], sol_int_range_list[line_i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    # plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/105:
# replot with new normalisation
fig, ax = plt.subplots(len(renorm_lines_indx), 1, figsize=(10,10))

for i, line_i in enumerate(renorm_lines_indx):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[line_i,j], sol_int_range_list[line_i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    # plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/106:
# replot with new normalisation
fig, ax = plt.subplots(len(renorm_lines_indx), 1, figsize=(10,10))

for i, line_i in enumerate(renorm_lines_indx):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[line_i,j], sol_int_range_list[line_i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/107:
# replot with new normalisation
fig, ax = plt.subplots(len(renorm_lines_indx), 1, figsize=(10,10))

for i, line_i in enumerate(renorm_lines_indx):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[line_i,j], sol_int_renorm[line_i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/108:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,10))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[line_i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/109:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,10))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/110:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # # plot picked integration limits 
    # for lim in iag_int_lims[i,:]:
    #     ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/111:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
138/112:
# Replot the equivalent widths
renorm_eq_iag[i,j] = np.zeros(eq_iag)
for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/113:
# Replot the equivalent widths
renorm_eq_iag[i,j] = np.zeros(eq_iag)
# for i, line_i in enumerate(major_krs):
    
#     for j, thismu in enumerate(sol_mus):

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/114:
# Replot the equivalent widths
renorm_eq_iag[i,j] = np.zeros(eq_iag.shape)
# for i, line_i in enumerate(major_krs):
    
#     for j, thismu in enumerate(sol_mus):

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/115:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
# for i, line_i in enumerate(major_krs):
    
#     for j, thismu in enumerate(sol_mus):

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/116:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
138/117:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/1: mu_zs
139/2:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/3:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/4:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/5:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/6:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/7:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/8: # sav_data['iag_sun']
139/9:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/10: sol_mus
139/11:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/12:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/13: # linesobj[0][3].__dict__
139/14:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/15:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/16:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/17:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/18: # wavelengths
139/19: # linesobj[0][0].__dict__
139/20: plot_mu_intensities(1)
139/21:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/22:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/23: iag_int_lims[0]
139/24:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/25:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/26:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/27:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/28:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/29:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/30:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/31:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(6), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/32:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/33:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/34:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/35:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/36:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/37: # sav_data['iag_sun']
139/38:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/39: sol_mus
139/40:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/41:
major_krs = [286, 291, 293, 299, 427, 457] # 292 and 302 removed - empty gaps

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/42: # linesobj[0][3].__dict__
139/43:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/44:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/45:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/46:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/47: # wavelengths
139/48: # linesobj[0][0].__dict__
139/49: plot_mu_intensities(1)
139/50:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/51:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/52: iag_int_lims[0]
139/53:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/54:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/55:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/56:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/57:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/58:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/59:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/60:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/61:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/62:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/63:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/64:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/65:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/66: # sav_data['iag_sun']
139/67:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/68: sol_mus
139/69:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/70:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/71: # linesobj[0][3].__dict__
139/72:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/73:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/74:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/75:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/76: # wavelengths
139/77: # linesobj[0][0].__dict__
139/78: plot_mu_intensities(1)
139/79:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/80:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/81: iag_int_lims[0]
139/82:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/83:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/84:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/85:
fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/86:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/87:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/88:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/89:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/90: ax[i].plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/91: plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/92:
plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

plt.xlim((m3d_centre_wavelengths[0]-0.25), (m3d_centre_wavelengths[0]+0.25))
139/93:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/94:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

deblend_yy = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, deblend_yy)

plt.xlim((lam0-0.35), (lam0+0.35))
139/95:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.35
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

#deblend_yy = synth_blends(xx, yy, order=20, blank_lam=lam0)

#plt.plot(xx, deblend_yy)

#plt.xlim((lam0-0.35), (lam0+0.35))
139/96:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.35
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

deblend_yy = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, deblend_yy)

#plt.xlim((lam0-0.35), (lam0+0.35))
139/97:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.35
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/98:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.5
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/99:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.7
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/100:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.55
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/101:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.45
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/102:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/103:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/104:
# xx = sol_lams[0]
# yy = sol_fluxes[0]
# lam0 = m3d_centre_wavelengths[0]
# mask = np.abs(xx - lam0) < 0.4
# xx = xx[mask]
# yy = yy[mask]
xx = sol_lam_range_list[0,0]
yy = sol_int_range_list[0,0]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/105:
# xx = sol_lams[0]
# yy = sol_fluxes[0]
# lam0 = m3d_centre_wavelengths[0]
# mask = np.abs(xx - lam0) < 0.4
# xx = xx[mask]
# yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/106:
xx = sol_lams[0]
yy = sol_fluxes[0]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/107:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[j]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
139/108:
xx = sol_lams[1]
yy = sol_fluxes[1]
lam0 = m3d_centre_wavelengths[1]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/109:
xx = sol_lams[1]
yy = sol_fluxes[1]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/110:
xx = sol_lams[2]
yy = sol_fluxes[2]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/111:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
139/112:
line_0_eqw = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

    line_0_eqw.append(integrate.simps(y=1-yy_blend, x=xx) * 1000)
139/113:
line_0_eqw = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

    line_0_eqw.append(integrate.simps(y=1-yy_blend, x=xx) * 1000)

    # overwrite lambda range for this line 
    sol_lam_range_list[0,j] = yy
139/114:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

    line_0_eqw.append(integrate.simps(y=1-yy_blend, x=xx) * 1000)
    line_0_int.append(yy_blend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
139/115:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

    line_0_eqw.append(integrate.simps(y=1-yy_blend, x=xx) * 1000)
    line_0_int.append(yy_blend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_blend
139/116:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4))
139/117:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/118:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/119:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/120:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/121:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/122:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/123:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4, label='iag')

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend9

#plt.xlim((lam0-0.35), (lam0+0.35))
139/124:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4, label='iag')

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/125:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/126:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/127:
m = 2
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/128:
m = 3
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/129:
m = 4
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/130:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/131:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=10, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/132:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=30, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/133:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/134:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/135:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/136:
fig, axs = plt.subplots(2,3, figsize=(8,4),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/137:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,100))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/138:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,10))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/139:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,7))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/140:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(8,5),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/141:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    thislam0 = np.where(min(yy), xx)
    print(thislam0)
139/142:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    thislam0 = xx[np.argmin(yy)]
    print(thislam0)
139/143:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/144:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/145:
xx = sol_lams[2]
yy = sol_fluxes[2]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20)#, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/146:
xx = sol_lams[2]
yy = sol_fluxes[2]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/147:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    plt.plot(xx,yy)
139/148:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/149:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/150:
m = 0
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/151:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/152:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_deblend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/153:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/154:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/155:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/156:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/157:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
139/158:
# replot line 0
for j, mu in enumerate(sol_mus):
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

plt.legend()
139/159:
# replot line 0
for j, mu in enumerate(sol_mus):
    
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j],label=sol_mus[j])

plt.legend()
139/160:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/161:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/162:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/163:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/164:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/165: # sav_data['iag_sun']
139/166:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/167: sol_mus
139/168:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/169:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/170: # linesobj[0][3].__dict__
139/171:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/172:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/173:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/174:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/175: # wavelengths
139/176: # linesobj[0][0].__dict__
139/177: plot_mu_intensities(1)
139/178:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/179:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/180: iag_int_lims[0]
139/181:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/182:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/183:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/184:
fig, axs = plt.subplots(2,3, figsize=(8,4),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/185:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,10))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/186:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/187:
xx = sol_lams[2]
yy = sol_fluxes[2]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)


plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/188:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    plt.plot(xx,yy)
139/189:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    thislam0 = xx[np.argmin(yy)]
    print(thislam0)
139/190:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/191:
# replot line 0
for j, mu in enumerate(sol_mus):
    
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j],label=sol_mus[j])

plt.legend()
139/192:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/193:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,7))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/194:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(8,5),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/195:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/196:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    plt.plot(xx, yy_deblend)
139/197:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    plt.plot(xx, yy_deblend, xx, yy)
139/198:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    plt.plot(xx[0], yy_deblend[0], xx[0], yy[0])
139/199:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    plt.plot(xx, yy_deblend, xx, yy)
139/200:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==0:
        plt.plot(xx, yy_deblend, xx, yy)
139/201:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==1:
        plt.plot(xx, yy_deblend, xx, yy)
139/202:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==2:
        plt.plot(xx, yy_deblend, xx, yy)
139/203:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==3:
        plt.plot(xx, yy_deblend, xx, yy)
139/204:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==4:
        plt.plot(xx, yy_deblend, xx, yy)
139/205:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy)
139/206:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==4:
        plt.plot(xx, yy_deblend, xx, yy)
139/207:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy)
139/208:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=1000)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy)
139/209:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy)
139/210:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/211:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=10, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/212:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=15, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/213:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=20, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/214:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/215:
# replot line 0
for j, mu in enumerate(sol_mus):
    
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j],label=sol_mus[j])

plt.legend()
139/216:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
# sol_int_renorm = np.zeros((len(renorm_lines_indx), len(sol_mu_ind)), dtype=object)

for i, i_line in enumerate(renorm_lines_indx):
    for j, mu in enumerate(sol_mus):
        sol_int_range_list[i_line,j] = sol_int_range_list[i_line,j]/continuum(sol_lam_range_list[i_line,j], sol_int_range_list[i_line,j])
139/217:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(5,7))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/218:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/219:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(8,5),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/220:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(18,15),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/221:
# Replot the equivalent widths
renorm_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            renorm_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/222:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/223:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend, xx, yy, xx, yy_blend)
139/224:
# replot line 0
for j, mu in enumerate(sol_mus):
    
    plt.plot(sol_lam_range_list[0,j], sol_int_range_list[0,j],label=sol_mus[j])

plt.legend()
139/225:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    if j==5:
        plt.plot(xx, yy_deblend)#, xx, yy, xx, yy_blend)
139/226:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
# sol_int_renorm = np.zeros((len(renorm_lines_indx), len(sol_mu_ind)), dtype=object)

for i, i_line in enumerate(renorm_lines_indx):
    for j, mu in enumerate(sol_mus):
        sol_int_range_list[i_line,j] = sol_int_range_list[i_line,j]/continuum(sol_lam_range_list[i_line,j], sol_int_range_list[i_line,j])
139/227:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/228:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/229:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/230: integrate.simps(y=1-sol_int_range_list[0,5]
139/231: integrate.simps(y=1-sol_int_range_list[0,5])
139/232: integrate.simps(y=1-sol_int_range_list[0,5], x=sol_lam_range_list[0,5])
139/233: integrate.simps(y=1-sol_int_range_list[0,5], x=sol_lam_range_list[0,5])*1000
139/234:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000
            print(i,j,new_eq_iag)

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/235:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000
            print(i,j,new_eq_iag[i,j])

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, renorm_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/236:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000
            print(i,j,new_eq_iag[i,j])

        # eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/237:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/238:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    # if j==5:
    #     plt.plot(xx, yy_deblend)#, xx, yy, xx, yy_blend)
139/239:
# for j, mu in enumerate(sol_mus):
#     xx = sol_lams[j]
#     yy = sol_fluxes[j]
#     lam0 = m3d_centre_wavelengths[0]
#     mask = np.abs(xx - lam0) < 0.4
#     xx = xx[mask]
#     yy = yy[mask]
#     thislam0 = xx[np.argmin(yy)]
#     print(thislam0)
139/240:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/241:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/242:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/243:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        ax[i].plot(sol_int_renorm[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/244:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/245:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/246:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/247:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/248:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/249:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/250:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/251: # sav_data['iag_sun']
139/252:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/253: sol_mus
139/254:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/255:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/256: # linesobj[0][3].__dict__
139/257:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/258:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/259:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/260:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/261: # wavelengths
139/262: # linesobj[0][0].__dict__
139/263: plot_mu_intensities(1)
139/264:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/265:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/266: iag_int_lims[0]
139/267:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/268:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/269:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/270:
fig, axs = plt.subplots(2,3, figsize=(8,4),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/271:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/272:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/273:
xx = sol_lams[2]
yy = sol_fluxes[2]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]


plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=lam0)


plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/274:
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    plt.plot(xx,yy)
139/275:
# for j, mu in enumerate(sol_mus):
#     xx = sol_lams[j]
#     yy = sol_fluxes[j]
#     lam0 = m3d_centre_wavelengths[0]
#     mask = np.abs(xx - lam0) < 0.4
#     xx = xx[mask]
#     yy = yy[mask]
#     thislam0 = xx[np.argmin(yy)]
#     print(thislam0)
139/276:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
    # if j==5:
    #     plt.plot(xx, yy_deblend)#, xx, yy, xx, yy_blend)
139/277:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/278:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/279: integrate.simps(y=1-sol_int_range_list[0,5], x=sol_lam_range_list[0,5])*1000
139/280:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/281:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/282:
fig, axs = plt.subplots(2,3, figsize=(15,20),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/283:
fig, axs = plt.subplots(2,3, figsize=(15,11),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/284:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/285:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.5, 5645.75],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/286: iag_int_lims[0]
139/287:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/288:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/289:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/290:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/291:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/292:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/293: # linesobj[0][3].__dict__
139/294:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/295:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/296:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/297:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/298:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/299:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/300:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/301: # wavelengths
139/302: # linesobj[0][0].__dict__
139/303: plot_mu_intensities(1)
139/304: plot_mu_intensities(0)
139/305:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/306:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/307:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/308:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5772,5772.3],[7034.7,7035.1],[7226.1,7226.4]])
139/309: iag_int_lims[0]
139/310:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/311:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/312:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/313:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(eqwidths_1dlte):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/314: test_cog.__dict__
139/315: eqwidths_1dlte
139/316: eqwidths_1dlte.shape
139/317:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/318:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/319:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
axs.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/320:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
fig.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/321:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/322:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/323:
# xx = sol_lams[2]
# yy = sol_fluxes[2]
# lam0 = m3d_centre_wavelengths[0]
# mask = np.abs(xx - lam0) < 0.4
# xx = xx[mask]
# yy = yy[mask]


# plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

# blend = synth_blends(xx, yy, order=20, blank_lam=lam0)


# plt.plot(xx, 1 - ((1-yy) - (1-blend)))

#plt.xlim((lam0-0.35), (lam0+0.35))
139/324:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/325:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/326:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/327:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/328:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/329:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    # plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/330: integrate.simps(y=1-sol_int_range_list[0,5], x=sol_lam_range_list[0,5])*1000
139/331:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/332:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/333:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(7,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/334:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_range_list[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/335:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/336:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/337:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
139/338:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
139/339:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
139/340:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
139/341:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
139/342:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
139/343: # sav_data['iag_sun']
139/344:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
139/345: sol_mus
139/346:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
139/347:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
139/348: # linesobj[0][3].__dict__
139/349:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901, 7226.208]
139/350:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/351:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/352:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/353: # wavelengths
139/354: # linesobj[0][0].__dict__
139/355: plot_mu_intensities(0)
139/356:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
139/357:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
139/358: iag_int_lims[0]
139/359:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
139/360:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
139/361: test_cog.__dict__
139/362:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
139/363: eqwidths_1dlte.shape
139/364:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/365:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/366:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
139/367:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
139/368:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
139/369:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(7,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
139/370:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
139/371:
m = 1
xx = sol_lams[m]
yy = sol_fluxes[m]
lam0 = m3d_centre_wavelengths[0]
mask = np.abs(xx - lam0) < 0.4
xx = xx[mask]
yy = yy[mask]
thislam0 = xx[np.argmin(yy)]

plt.plot(xx, yy, linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)

blend = synth_blends(xx, yy, order=20, blank_lam=thislam0)
plt.plot(xx, blend, label='blend')
plt.plot(xx, 1 - ((1-yy) - (1-blend)), label='deblended')
plt.legend()

#plt.xlim((lam0-0.35), (lam0+0.35))
139/372: plot_mu_intensities(-1)
139/373:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
139/374:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
139/375:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
139/376:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
139/377: # wavelengths
139/378: # linesobj[0][0].__dict__
139/379: plot_mu_intensities(-1)
139/380:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
140/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  




%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
140/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
140/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
140/4:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
140/5: wavelengths = [line.lambda0 for line in linesobj[0]]
140/6: wavelengths
140/7:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
140/8: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
140/9:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
140/10: LTE_runs = 'runs/Si_marcs_LTE_dir/'
140/11: test_cog = CoG(runs=LTE_runs, lines=major_krs)
140/12:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
140/13:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  




%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
140/14:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
140/15:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
140/16:
#major_krs = [286, 291, 292, 293, 299, 302, 427, 457]
major_krs = [286, 291, 292, 293, 299, 302, 427, 457]

runfiles = ['runs/Si_marcsLTE776/output/', 'runs/Si_marcs_LTE_run/output/', 'runs/Si_marcsLTE736/output/', 'runs/Si_stag_NLTE_5x5x230_run/output/']
labels = ['1D LTE A(7.76)', '1D LTE A(7.56)', '1D LTE A(7.36)', '3D NLTE A(7.56)']
abundances = [7.76, 7.56, 7.36, 7.56]

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
# run1DLTE_736 = m3d('runs/Si_marcsLTE776/output/', lines=major_krs conts=[])
# run1DLTE_756 = m3d('runs/Si_marcs_LTE_run/output/', lines=major_krs,  conts=[])
# run1DLTE_736 = m3d('runs/Si_marcsLTE736/output/', lines=major_krs,  conts=[])
140/17: wavelengths = [line.lambda0 for line in linesobj[0]]
140/18: wavelengths
140/19:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(10,17))

for i, runs in enumerate(linesobj):
    
    for j, thisline in enumerate(runs):
        plt.sca(ax[j])
        thisline.plot(qmax=3.5)#label=f'LTE falc: eqw={thisline.calc_weq(qmax=3.5):.2f} ')
        #plt.plot(thisline.q[::-1], thisline.flux)
        ax[j].legend(labels)

plt.tight_layout()
140/20: eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])
140/21:
fig_ew, ax_ew = plt.subplots(len(major_krs), 1, figsize=(10,17))


for i, kr in enumerate(major_krs):
    ax_ew[i].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
    ax_ew[i].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
    ax_ew[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax_ew[i].set_ylabel('Eq. width, mÅ')
    ax_ew[i].set_xlabel('Rel. abundance, dex')

    ax_ew[i].legend()

plt.tight_layout()
140/22: LTE_runs = 'runs/Si_marcs_LTE_dir/'
140/23: test_cog = CoG(runs=LTE_runs, lines=major_krs)
140/24:
NLTE_obj = runobjects[3]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  




%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
142/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
142/3:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
142/4:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
142/5:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
142/6:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']


runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
142/7:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']


runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
142/8:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
140/25:
NLTE_obj = runobjects[1]
corrections = [test_cog.abnds_corr(NLTE_obj, thiskr, qmax=3.5) for thiskr in major_krs]
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/9:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
142/10:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
142/11:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
142/12:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
142/13:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
142/14:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']


runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
142/15:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
142/16: eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
142/17: eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
142/18: eqwidths_1dlte
142/19: eqwidths_1dlte.shape
142/20:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for kr in major_krs])
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/21:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
print(np.array(corrections))
# test_cog.abnds_corr(NLTE_obj, 286, qmax=3.5)
# test_cog.abnds_corr(NLTE_obj, 293, qmax=3.5)

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/22:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/23:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[NLTE_obj.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
142/24:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[NLTE_obj.line.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
144/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
144/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
144/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
144/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']


runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
144/6:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
144/7:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[NLTE_obj.line.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/8:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])


LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
144/9: NLTE3Drunobj
144/10: NLTE3Drunobj.shape
144/11: NLTE3Drunobj.__dict__
144/12: NLTE3Drunobj.line
144/13: linesobj
144/14:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
144/15:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
144/16:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for line in NLTE3Dlines] for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/17:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for line in enumerate(NLTE3Dlines)] for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/18:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for line in range(len((NLTE3Dlines)))] for ang in range(len(sol_mus))] for kr in major_krs])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/19: eqw_NLTE
144/20:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for line in range(len((NLTE3Dlines)))] for ang in range(len(sol_mus))])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/21:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for line in range(len((NLTE3Dlines)))] for ang in range(len(sol_mus))]])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/22: eqw_NLTE
144/23:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = np.array([[[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))]for line in range(len((NLTE3Dlines)))]])

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/24: eqw_NLTE
144/25:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(10,17))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
        ax_ew[i,j].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/26:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(15,17))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(abundances[:-1], eq_widths[:-1,i], '--x', label='1D LTE')
        ax_ew[i,j].plot(abundances[-1], eq_widths[-1,i], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/27:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(15,17))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(abundances[:-1], eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(abundances[-1], eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/28:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(abundances[:-1], eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(abundances[-1], eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/29:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/30:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
NLTE3Drunobj.abnd
144/31:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
144/32:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/33: eqw_NLTE[0,0]
144/34: eqw_NLTE
144/35: eqw_NLTE[]
144/36:
NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE_obj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))]for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/37: eqw_NLTE
144/38:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/39: eqw_NLTE[0,0]
144/40:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        print(i,j)
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i,j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/41:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        print(i,j)
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[0,0], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/42:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        print(i,j)
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[1,1], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/43: NLTE3Drunobj.abnd
144/44: eqw_NLTE[0,0]
144/45: eqw_NLTE
144/46: eqw_NLTE[[0,0]]
144/47: eqw_NLTE[0][0]
144/48:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(20,15))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        print(i,j)
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/49:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/50:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $/mu = {sol_mus}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/51:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $/mu = {sol_mus[i]}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/52:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[i]}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/53:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')

        ax_ew[i,j].legend()

plt.tight_layout()
144/54:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))]for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
144/55: corrections.shape
144/56:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(j,i, ax_ew[i,j],  0.53, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/57:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Abundance correction:': corrections[i,j]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
144/58:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(j,i, ax_ew[i,j],  0.53, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/59:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.53, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/60:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': corrections[i,j]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=10, color=color)
    return None
144/61:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': corrections[i,j]
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
144/62:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.53, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/63:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': round(corrections[i,j],2)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
144/64:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.54, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/65:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': round(corrections[i,j],2)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
144/66:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.54, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/67:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],2)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
144/68:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.54, 0.25)

        ax_ew[i,j].legend()

plt.tight_layout()
144/69:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.34, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
144/70:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
144/71:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=6, color=color)
    return None
144/72:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
144/73:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
144/74:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
144/75:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
fig_ew.savefig('plots/3dabundcorr_mu')
144/76:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
fig_ew.savefig('plots/3dabundcorr_mu.pdf')
145/1: plt.plot(test_cog.abnds)
145/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
145/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
145/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
145/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
145/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
145/7: # sav_data['iag_sun']
145/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
145/9: sol_mus
145/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
145/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
145/12: # linesobj[0][3].__dict__
145/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
145/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
145/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
145/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
145/17: # wavelengths
145/18: # linesobj[0][0].__dict__
145/19: plot_mu_intensities(-1)
145/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
145/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
145/22: iag_int_lims[0]
145/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
145/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
145/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
145/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
145/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.35), (m3d_centre_wavelengths[i]+0.35))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/28:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
145/29:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
145/30:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
145/31:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/32:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
145/33: plt.plot(test_cog.abnds)
145/34: plt.plot(test_cog.abnds, new_eq_iag[:,0])
145/35: plt.plot(test_cog.abnds, eqwidths_1dlte[0,0,:])
145/36: plt.plot(test_cog.abnds, eqwidths_1dlte[0,0,:], 'x')
145/37: plt.plot(eqwidths_1dlte[0,0,:], 'x', test_cog.abnds,)
145/38: plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
145/39: from scipy import interpolate
145/40:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
plt.plot(new_eq_iag[0,0]
145/41:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
plt.plot(new_eq_iag[0,0])
145/42:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(7.3, 7.8)
ynew = f(xnew)
plt.plot(xnew, ynew, '-')
# plt.plot(new_eq_iag[0,0], )
145/43:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(test_cog.abnds), max(test_cog.abnds))
ynew = f(xnew)
plt.plot(xnew, ynew, '-')
# plt.plot(new_eq_iag[0,0], )
145/44:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
plt.plot(xnew, ynew, '-')
# plt.plot(new_eq_iag[0,0], )
145/45:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0]))
145/46:
# plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
# plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0]))
145/47: f(new_eq_iag[0,0])
145/48: new_eq_iag[0,0]
145/49:
# plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
# plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0][0]))
145/50:
# plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
# plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0]))
145/51:
# plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
# plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0]), 'x')
145/52:
plt.plot(eqwidths_1dlte[0,0,:], test_cog.abnds,'x')
x = eqwidths_1dlte[0,0,:]
y = test_cog.abnds
f = interpolate.interp1d(x,y)

xnew = np.arange(min(x), max(x))
ynew = f(xnew)
plt.plot(xnew, ynew, '-')
plt.plot(new_eq_iag[0,0], f(new_eq_iag[0,0]), 'o')
145/53:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
145/54: len(eqwidths_1dlte)
145/55:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros(len(lte1d_lines_eq), len(sol_mus))
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y)

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/56: eqwidths_1dlte.shape
145/57: np.take(eqwidths_1dlte, [0,3,4])
145/58: np.take(eqwidths_1dlte, [0,3,4], axis=0)
145/59: np.take(eqwidths_1dlte, [0,3,4], axis=0).shape
145/60: test_cog
145/61: test_cog[0]
145/62: new_eq_iag.shape
145/63: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abunds, np.take(new_eq_iag, [0,3,4], axis=0)
145/64: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abunds, np.take(new_eq_iag, [0,3,4], axis=0))
145/65: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/66:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y)

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/67: np.take(eqwidths_1dlte, [0,3,4], axis=0).shape
145/68: new_eq_iag.shape
145/69: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/70:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/71: np.take(eqwidths_1dlte, [0,3,4], axis=0).shape
145/72: new_eq_iag.shape
145/73: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/74: iag_1dlte_abunds
145/75: np.take(eqwidths_1dlte, [0,3,4], axis=0)
145/76:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        print(i)
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/77: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/78: np.take(eqwidths_1dlte, [0,3,4], axis=0)
145/79: iag_1dlte_abunds
145/80:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        print(i)
        for j, mu in enumerate(sol_mus):
            print(j)
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/81: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/82:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        print(i)
        for j, mu in enumerate(sol_mus):
            print('j:',j)
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq)
    return interpd_sol_abunds
145/83: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/84:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        print(i)
        for j, mu in enumerate(sol_mus):
            print('j:',j)
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
145/85: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/86: np.take(eqwidths_1dlte, [0,3,4], axis=0)
145/87: iag_1dlte_abunds
145/88:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
145/89: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/90: iag_1dlte_abunds
146/1: np.save('data/3DNLTE_abund_corr', corrections)
146/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
146/3:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
146/4:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
146/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
146/6:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
146/7:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
146/8:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))]for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
146/9: corrections.shape
146/10:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
146/11:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
146/12: np.save('data/3DNLTE_abund_corr', corrections)
145/91: fig, axs = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))
145/92:
fig, axs = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    plt.plot(sol_mus, iag_1dlte_abunds[i])
145/93:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i])
145/94:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')
145/95:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', facecolors='none')
145/96:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')
145/97:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
145/98:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/99:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/100:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(15,15))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/101:
fig, ax = plt.subplots(len(iag_1dlte_abunds), 1, figsize=(12,15))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/102:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(12,15))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/103:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,10))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/104:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/105:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(26,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/106:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(30,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/107:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(30,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
plt.tight_layout()
145/108:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(30,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend()
plt.tight_layout()
145/109:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
145/110:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(30,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend()
plt.tight_layout()
145/111:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,8))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend()
plt.tight_layout()
145/112:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend()
plt.tight_layout()
145/113: help plt.legend
145/114: help fig.legend
145/115: help plt.plt.legend
145/116: help plt.plot.legend
145/117: help plt.fig.legend
145/118: help plt.legend
145/119: help plt.legend()
145/120: help(plt.legend())
145/121:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend(frameon=1)
plt.tight_layout()
145/122: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
145/123:
NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
NLTE3Dcorrections
145/124: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
145/125: NLTE3Dcorrections
145/126: iag_1dlte_abunds[0]
145/127: iag_1dlte_abunds[0][0]
145/128: iag_1dlte_abunds[0][0][0]
145/129: iag_1dlte_abunds[0][0]
145/130: iag_1dlte_abunds[0][0] + 1
145/131: iag_1dlte_abunds
145/132: iag_1dlte_abunds[0][0] + NLTE3Dcorrections[0,0]
145/133: 7.5687147 + 0.05233834
145/134: sol_mus
145/135: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections)
145/136: NLTE3Dcorrections.shape
145/137: NLTE3Dcorrections
145/138: NLTE3Dcorrections[0]
145/139: NLTE3Dcorrections[]
145/140: NLTE3Dcorrections[:]
145/141: NLTE3Dcorrections.reshape(3,6)
145/142: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections.reshape(3,6))
145/143:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol,mus, iag_3DNLTE_corrected_abund, 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend(frameon=1)
plt.tight_layout()
145/144:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund, 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend(frameon=1)
plt.tight_layout()
145/145:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend(frameon=1)
plt.tight_layout()
145/146:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')

    ax[i].legend(frameon=1)
plt.tight_layout()
fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
145/147:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
    ax[i].set_ylim(7.47, 7.63)
    ax[i].legend(frameon=1)
plt.tight_layout()
# fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
145/148:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/149:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
145/150:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
145/151:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
145/152:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
145/153:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
145/154:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
145/155: # sav_data['iag_sun']
145/156:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
145/157: sol_mus
145/158:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
145/159:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
145/160: # linesobj[0][3].__dict__
145/161:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
145/162:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
145/163:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
145/164:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
145/165: # wavelengths
145/166: # linesobj[0][0].__dict__
145/167: plot_mu_intensities(-1)
145/168:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
145/169:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
145/170: iag_int_lims[0]
145/171:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
145/172:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
145/173:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
145/174:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
145/175:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/176:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
145/177:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
145/178:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
145/179:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/180:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
145/181: sol_mus
145/182:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
145/183: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
145/184: iag_1dlte_abunds
145/185: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
145/186: NLTE3Dcorrections
145/187: NLTE3Dcorrections.reshape(3,6)
145/188: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections.reshape(3,6))
145/189:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
    ax[i].set_ylim(7.47, 7.63)
    ax[i].legend(frameon=1)
plt.tight_layout()
# fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
145/190: help(plt.legend())
145/191:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
145/192:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
148/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
148/2:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
148/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
148/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
148/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
148/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
148/7: # sav_data['iag_sun']
148/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
148/9: sol_mus
148/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
148/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
148/12: # linesobj[0][3].__dict__
148/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
148/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
148/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
148/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
148/17: # wavelengths
148/18: # linesobj[0][0].__dict__
148/19: plot_mu_intensities(-1)
148/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
148/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
148/22: iag_int_lims[0]
148/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
148/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
148/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
148/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
148/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
148/28:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
148/29:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
148/30:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
148/31:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
150/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
150/2:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
150/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
150/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
150/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
150/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
150/7: # sav_data['iag_sun']
150/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
150/9: sol_mus
150/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
150/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
150/12: # linesobj[0][3].__dict__
150/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
150/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
150/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
150/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
150/17: # wavelengths
150/18: # linesobj[0][0].__dict__
150/19: plot_mu_intensities(-1)
150/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
150/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
150/22: iag_int_lims[0]
150/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
150/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
150/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
150/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
150/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
150/28:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
150/29:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
150/30:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
150/31:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
150/32:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
150/33: sol_mus
150/34:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
150/35: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
150/36: iag_1dlte_abunds
150/37: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
150/38: NLTE3Dcorrections
150/39: NLTE3Dcorrections.reshape(3,6)
150/40: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections.reshape(3,6))
150/41:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
    ax[i].set_ylim(7.47, 7.63)
    ax[i].legend(frameon=1)
plt.tight_layout()
# fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
150/42: help(plt.legend())
153/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
154/1:
%config InlineBackend.figure_format='png'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
153/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
153/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
153/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
153/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
153/6:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
153/7:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
153/8: corrections.shape
153/9:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
153/10:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
153/11: # np.save('data/3DNLTE_abund_corr', corrections)
154/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
154/3:
%config InlineBackend.figure_format='png'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
154/4:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
154/5:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
154/6:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
154/7:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
154/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
154/9:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
154/10:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
154/11: # sav_data['iag_sun']
154/12:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
154/13: sol_mus
154/14:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
154/15:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
154/16: # linesobj[0][3].__dict__
154/17:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
154/18:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
154/19:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
154/20: plot_mu_intensities(-1)
155/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
155/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
155/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
155/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
155/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
155/6:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
155/7:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
155/8: corrections.shape
155/9:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
155/10:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
155/11: # np.save('data/3DNLTE_abund_corr', corrections)
155/12:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
155/13:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
155/14:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
155/15:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
155/16:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
155/17:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
155/18:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
155/19: corrections.shape
155/20:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
155/21:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
155/22: # np.save('data/3DNLTE_abund_corr', corrections)
155/23:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
155/24:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
157/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
157/2:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
157/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
157/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
157/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
157/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
157/7: # sav_data['iag_sun']
157/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
157/9: sol_mus
157/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
157/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
157/12: # linesobj[0][3].__dict__
157/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
157/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
157/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
157/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
157/17: # wavelengths
157/18: # linesobj[0][0].__dict__
157/19: plot_mu_intensities(-1)
157/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
157/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
157/22: iag_int_lims[0]
157/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
157/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
157/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
157/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
157/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
157/28:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
159/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
159/2:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
159/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
159/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
159/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
159/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
159/7: # sav_data['iag_sun']
159/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
159/9: sol_mus
159/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
159/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
159/12: # linesobj[0][3].__dict__
159/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
159/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
159/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
159/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
159/17: # wavelengths
159/18: # linesobj[0][0].__dict__
159/19: plot_mu_intensities(-1)
159/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
159/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
159/22: iag_int_lims[0]
159/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
159/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
159/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
159/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
159/27:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
159/28:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    # for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        # ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/29:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/30:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', marker='.', zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/31:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j])#, linestyle='none', marker='.', zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-5), (m3d_centre_wavelengths[i]+5))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/32:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j])#, linestyle='none', marker='.', zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-3), (m3d_centre_wavelengths[i]+3))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/33:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], linestyle='none', zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-3), (m3d_centre_wavelengths[i]+3))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/34:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-3), (m3d_centre_wavelengths[i]+3))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/35:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
159/36:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
159/37:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
159/38:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
159/39:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
159/40:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
159/41: # sav_data['iag_sun']
159/42:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
159/43: sol_mus
159/44:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
159/45:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
159/46: # linesobj[0][3].__dict__
159/47:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
159/48:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
159/49:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
159/50:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
159/51: # wavelengths
159/52: # linesobj[0][0].__dict__
159/53: plot_mu_intensities(-1)
159/54:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
159/55:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
159/56: iag_int_lims[0]
159/57:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
159/58:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
159/59:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
159/60:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
159/61:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-3), (m3d_centre_wavelengths[i]+3))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/62:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
159/63:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
159/64:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
159/65:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], linestyle='none', zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/66:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
159/67: sol_mus
159/68:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
159/69: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
159/70: iag_1dlte_abunds
159/71: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
159/72: NLTE3Dcorrections
159/73: NLTE3Dcorrections.reshape(3,6)
159/74: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections.reshape(3,6))
159/75:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
    ax[i].set_ylim(7.47, 7.63)
    ax[i].legend(frameon=1)
plt.tight_layout()
# fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
159/76: help(plt.legend())
159/77:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
159/78:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
159/79:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
150/43:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
164/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
164/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
164/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
164/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
164/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
164/6:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
164/7:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
164/8: corrections.shape
164/9:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
164/10:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
164/11: # np.save('data/3DNLTE_abund_corr', corrections)
164/12:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
164/13: np.arccos
164/14: np.arccos(1)
164/15: np.arccos(0.2)
164/16: np.arccos(0)
164/17: np.arccos(0)*2
164/18:

angle = np.linspace( 0 , 2 * np.pi , 150 ) 
 
radius = 0.4
 
x = radius * np.cos( angle ) 
y = radius * np.sin( angle ) 
 
figure, axes = plt.subplots( 1 ) 
 
axes.plot( x, y ) 
axes.set_aspect( 1 ) 
 
plt.title( 'Parametric Equation Circle' )
164/19:

angle = np.linspace( 0 , 2 * np.pi , 150 ) 
 
radius = 0.4
 
x = radius * np.cos( angle ) 
y = radius * np.sin( angle ) 
 
figure, axes = plt.subplots( 1 ) 
 
axes.plot( x, y ) 
axes.set_aspect( 1 ) 
 
# plt.title( 'Parametric Equation Circle' )
164/20:

angle = np.linspace( 0 , 2 * np.pi , 150 ) 
 
radius = 1
 
x = radius * np.cos( angle ) 
y = radius * np.sin( angle ) 
 
figure, axes = plt.subplots( 1 ) 
 
axes.plot( x, y ) 
axes.set_aspect( 1 ) 
 
# plt.title( 'Parametric Equation Circle' )
164/21:
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rmax(2)
ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

ax.set_title("A line plot on a polar axis", va='bottom')
plt.show()
164/22:
r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rmax(2)
ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/23:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(1)
ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/24:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(1)
# ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/25:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(1)
rticks = [np.arcos(mu) for mu in sol_mus]
ax.set_rticks([rticks])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/26: rticks
164/27:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(1)
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rticks([rticks])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/28: rticks
164/29:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rticks([rticks])  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/30:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rticks(rticks)  # Less radial ticks
ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/31:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rgrids(rticks)  # Less radial ticks

ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/32:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rgrids(rticks, labels=sol_mus)  # Less radial ticks

ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)

plt.show()
164/33:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rgrids(rticks, labels=sol_mus)  # Less radial ticks

ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)
164/34:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(5,5))
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rgrids(rticks, labels=sol_mus)  # Less radial ticks

ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)
164/35:
# r = np.arange(0, 1, 0.01)
theta = 2 * np.pi * r

fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(8,8))
# ax.plot(theta, r)
ax.set_rmax(np.arccos(0))
rticks = [np.arccos(mu) for mu in sol_mus]
ax.set_rgrids(rticks, labels=sol_mus)  # Less radial ticks

ax.set_rlabel_position(-22.5)  # Move radial labels away from plotted line
ax.grid(True)
173/1:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
# plotting the circle
for i in rads:
    plt.polar(i, r, 'g.')
   
# display the Polar plot
plt.show()
173/2:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   

   
# display the Polar plot
plt.show()
173/3:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
plt.set_rmax(1)
   
# display the Polar plot
plt.show()
173/4:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
set_rgrids.set_rmax(1)
   
# display the Polar plot
plt.show()
173/5:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
set_rgrids().set_rmax(1)
   
# display the Polar plot
plt.show()
173/6:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
plt.set_rgrids()
   
# display the Polar plot
plt.show()
173/7:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
axes.set_rgrids()
   
# display the Polar plot
plt.show()
173/8:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
plt.polat.set_rgrids()
   
# display the Polar plot
plt.show()
173/9:
#import numpy and matplotlib library
import numpy as np
import matplotlib.pyplot as plt
   
   
plt.axes(projection = 'polar')
 
r = 3
   
rads = np.arange(0, (2 * np.pi), 0.01)
   
plt.polar.set_rgrids()
   
# display the Polar plot
plt.show()
173/10:
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='tight')

plt.show()
173/11:
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111, projection='polar', figsize=10)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='tight')

plt.show()
173/12:
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111, projection='polar', figsize=(10,10))

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='tight')

plt.show()
173/13:
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='tight')

plt.show()
171/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
171/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
171/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
171/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
171/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
171/6:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
171/7:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
171/8: corrections.shape
171/9:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
171/10:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
171/11: # np.save('data/3DNLTE_abund_corr', corrections)
171/12:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
176/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
176/3:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
176/4:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
176/5:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
176/6:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
176/7:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
176/8: corrections.shape
176/9:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
176/10:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
176/11: # np.save('data/3DNLTE_abund_corr', corrections)
176/12:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/13:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
176/14:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
176/15:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
176/16:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
176/17:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
176/18:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
176/19:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
176/20: corrections.shape
176/21:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
176/22:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
176/23: # np.save('data/3DNLTE_abund_corr', corrections)
176/24:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/25:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/26:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/27:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,4,1.0))

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/28: rmax
176/29:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(np.arange(0,5,1.0))

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/30:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))

ax.set_ylim(0,4)
ax.set_yticks(contours)

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/31:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
ax.set_ylim(0,4)
ax.set_yticks(contours)

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/32:
fig = plt.figure()

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
# ax.set_ylim(0,4)
ax.set_yticks(contours)

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/33:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
# ax.set_ylim(0,4)
ax.set_yticks(contours)

# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/34:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
# ax.set_ylim(0,4)
ax.set_rticks(contours)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
176/35:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
# ax.set_ylim(0,4)
# ax.set_rticks(contours)
ax.set_rgrids(contours,labels=sol_mus)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
179/1:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)

# ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
ax.set_rmax(rmax)
# ax.set_ylim(0,4)
# ax.set_yticks(contours)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
179/2:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
179/3:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
179/4:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
179/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
179/6:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
179/7:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
179/8:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
179/9: corrections.shape
179/10:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
179/11:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
179/12: # np.save('data/3DNLTE_abund_corr', corrections)
179/13:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)
ax.set_rgrids
# ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
# ax.set_rmax(rmax)
# ax.set_ylim(0,4)
# ax.set_yticks(contours)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
179/14: rmax
179/15:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)
ax.set_rgrids(contours, labels=sol_mus)
# ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
# ax.set_rmax(rmax)
# ax.set_ylim(0,4)
# ax.set_yticks(contours)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
181/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema
from scipy import interpolate
181/2:
%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
181/3:
mu_zs = [1.0, 0.9, 0.8, 0.6, 0.4, 0.2]
muzout = [1.0]
muxout = [0]
muyout = [0]

for mu_z in mu_zs[1:]:
    conjugate = np.round(np.sqrt(1-mu_z**2),4)
    if mu_z == 0.4:
        conjugate += 0.0001
    for i in range(4):
        muzout.append(mu_z)
    muxout.extend((conjugate, 0.0, -conjugate, 0.0))
    muyout.extend((0.0, conjugate, 0.0, -conjugate))

print('muxout = ',*muxout)
print('muyout = ',*muyout)
print('muzout = ',*muzout)
181/4:
# muxout = np.fromstring('0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804 0.0', sep=' ')
# muyout = np.fromstring('0.0 0.0 0.6092 0.0 -0.6092 0.0 0.7939 0.0 -0.7939 0.0 0.9057 0.0 -0.9057 0.0 0.9804 0.0 -0.9804', sep=' ')
# muzout = np.fromstring('1.0 0.793 0.793 0.793 0.793 0.608 0.608 0.608 0.608 0.424 0.424 0.424 0.424 0.197 0.197 0.197 0.197', sep=' ')
181/5:
# for i, _ in enumerate(muxout):
#     dummy = np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2)
#     if np.abs(dummy - 1e0) > 1e-4:
#         print('error')
#     print(np.sqrt(muxout[i]**2 + muyout[i]**2 + muzout[i]**2 ) - 1)
181/6:
sav_fname = pjoin('../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)
181/7: # sav_data['iag_sun']
181/8:
# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
181/9: sol_mus
181/10:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
181/11:
major_krs = [286, 291, 293, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# labels = [ '1D LTE', '3D NLTE', '1D LTE', '3D NLTE']
runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]
181/12: # linesobj[0][3].__dict__
181/13:
wavelengths = [line.lam0 for line in linesobj[0]]
m3d_centre_wavelengths = [5645.613, 5684.484, 5701.104, 5772.146, 7034.901]
181/14:
def get_ang_intensity(run, kr):
    sim_fluxes = [run.line[kr].i3[:,1]]
    for i, _ in enumerate(sol_mu_ind[1:]):
        ang=i+1
        ang_idx = (ang-1)*4+1
        sim_fluxes.append(np.mean(run.line[kr].i3[:, ang_idx:ang_idx+4], axis=-1))
    return sim_fluxes
181/15:
# ang=0
# ang_idx = (ang-1)*4+1
# intensity = np.mean(runobjects[0].line[286].i3[:, ang_idx:ang_idx+4], axis=-1)
181/16:
def plot_mu_intensities(line_ind):
    # define the wavelength range for this line with the m3d central wavelenght:
    line_lam = copy.deepcopy(linesobj[0][line_ind].lam)
    line_lam += m3d_centre_wavelengths[line_ind] - linesobj[0][line_ind].lam0

    sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
    sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))
    sim_int_3d = get_ang_intensity(runobjects[1], kr=major_krs[line_ind])
    sim_int_3d_norm = sim_int_3d/continuum(line_lam, np.array(sim_int_3d))

    fig, ax = plt.subplots(len(sol_mu_ind), 1, figsize=(17,25))

    for i, mu in enumerate(sol_mu_ind):
        # plot 1D LTE with cmacroturbulence onvolution Vmac = 3km
        ax[i].plot(line_lam, sim_int_1d_norm[i], label=f'1D LTE')
        ax[i].plot(*convol(line_lam, sim_int_1d_norm[i], zeta_rt=3), label=f'1D LTE conv')

        ax[i].plot(line_lam, sim_int_3d_norm[i], label=f'3D NLTE') 

        
        ax[i].plot(sol_lams[i], sol_fluxes[i], linestyle='none', marker='.', zorder=100, label=f'IAG solar spec')

        
        plt.sca(ax[i])
        plt.title(f'Line = {m3d_centre_wavelengths[line_ind]}, mu = {sol_mus[i]:.2f}')
        plt.xlim((m3d_centre_wavelengths[line_ind]-0.35), (m3d_centre_wavelengths[line_ind]+0.35))
        plt.ylim(0.35,1.05)
        plt.ylabel('Normalised Intensity')
        plt.xlabel('λ (Å)')
        plt.legend()
    # fig.savefig('line1_mudep.pdf')
181/17: # wavelengths
181/18: # linesobj[0][0].__dict__
181/19: plot_mu_intensities(-1)
181/20:
# eq_widths = np.array([[thisline.calc_weq(qmax=3.5) for thisline in lines] for lines in linesobj])

# plt.plot(sol_lams[0], sol_fluxes[0], linestyle='none', marker='.')
# plt.ylim(0.55,1.05)
# plt.xlim((m3d_centre_wavelengths[0]-0.35), (m3d_centre_wavelengths[0]+0.35))
181/21:
# define the integration limits for the iag observed solar spectrum for each line (keep same across angles)
iag_int_lims = np.array([[5645.4, 5645.8],[5684.31,5684.7],[5700.97,5701.3],[5771.9,5772.35],[7034.55,7035.2]])
181/22: iag_int_lims[0]
181/23:
eq_iag = np.zeros((len(major_krs), len(sol_mu_ind)))
sol_lam_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
sol_int_range_list = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)
for i, line in enumerate(major_krs):
    line_lammin, line_lammax = iag_int_lims[i]
    for j, mu in enumerate(sol_mu_ind):
        lam_range = sol_lams[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        intensity_range = sol_fluxes[j][np.logical_and((sol_lams[j] > line_lammin), (sol_lams[j] < line_lammax))]
        eq_iag[i,j] = integrate.simps(y=1-intensity_range, x=lam_range) * 1000
        # record the wavelengths and intensities corresponding to each line
        sol_lam_range_list[i,j] = lam_range
        sol_int_range_list[i,j] = intensity_range
181/24:
LTE_runs = 'runs/Si_marcs_LTE_dir/'
test_cog = CoG(runs=LTE_runs, lines=major_krs)
181/25:
eqwidths_1dlte = np.array([[test_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(mu_zs))] for kr in major_krs])
# eqwidths_1dlte
181/26:
fig, axs = plt.subplots(2,3, figsize=(15,8),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
181/27:
fig, ax = plt.subplots(len(major_krs), 1, figsize=(15,20))

for i, thiskr in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lams[j], sol_fluxes[j], zorder=100, label=sol_mus[j])#,markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-3), (m3d_centre_wavelengths[i]+3))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
181/28:
from scipy.signal import argrelextrema
from scipy.special import voigt_profile
from scipy import optimize

def synth_blends(obs_xx, obs_yy, order=20, blank_lam=None):
    exts = np.array(argrelextrema(obs_yy, np.less, order=order))[0]
    
    pn=5
    def model_func(xdata, *args):
        yy_pred = np.ones_like(xdata)
        
        for i, gamma in enumerate(args[::pn]):
            sigma = args[1::pn][i]
            scale = args[2::pn][i]
            shift = args[3::pn][i]
            skew  = args[4::pn][i]
            ext = exts[i]
            
            sxx = xdata - xdata[ext] + shift
            voigt = voigt_profile(sxx, sigma, gamma)
            
            sk_xx = sxx+np.abs(sxx)*skew
            sk_voigt = np.interp(sxx, sk_xx, voigt)
            
            yy_pred -= sk_voigt / np.max(sk_voigt) * (1-obs_yy[ext]) * scale
            
        return yy_pred
    
    params = np.ones(exts.size*pn)*1e-2
    params[2::pn] = 1
    params[3::pn] = 0
    params[4::pn] = 0
    
    pfit, pcov = optimize.curve_fit(model_func, obs_xx, obs_yy, p0=params)
    
    if blank_lam is not None:
        pfit_blank = pfit.copy()
        iline = np.where(obs_xx[exts] > blank_lam)[0][0]
        pfit_blank[pn*iline+2] = 0
        
        yy = model_func(obs_xx, *pfit_blank)
        
    else:
        yy = model_func(obs_xx, pfit)
    
    return yy
181/29:
line_0_eqw = []
line_0_int = []
for j, mu in enumerate(sol_mus):
    xx = sol_lams[j]
    yy = sol_fluxes[j]
    lam0 = m3d_centre_wavelengths[0]
    mask = np.abs(xx - lam0) < 0.4
    xx = xx[mask]
    yy = yy[mask]
    

    thislam0 = xx[np.argmin(yy)]
    yy_blend = synth_blends(xx, yy, order=25, blank_lam=0)
    # yy_blend = synth_blends(xx, yy, order=20, blank_lam=lam0)
    yy_deblend = 1 - ((1-yy) - (1-yy_blend))

    line_0_eqw.append(integrate.simps(y=1-yy_deblend, x=xx) * 1000)
    line_0_int.append(yy_deblend)

    # overwrite lambda/int range for this line 
    sol_lam_range_list[0,j] = xx
    sol_int_range_list[0,j] = yy_deblend
181/30:
# sim_int_1d = get_ang_intensity(runobjects[0], kr=major_krs[line_ind])
# sim_int_1d_norm = sim_int_1d/continuum(line_lam, np.array(sim_int_1d))

# define continuum at the chosen integration limits for each line
# renorm_lines_indx = [3,4]
sol_int_renorm = np.zeros((len(major_krs), len(sol_mu_ind)), dtype=object)

for i, line in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        sol_int_renorm[i,j] = sol_int_range_list[i,j]/continuum(sol_lam_range_list[i,j], sol_int_range_list[i,j])
181/31:
# replot with new normalisation
fig, ax = plt.subplots(len(major_krs), 1, figsize=(13,20))

for i, line_i in enumerate(major_krs):
    
    for j, thismu in enumerate(sol_mus):
        # plt.sca(ax[j])
        ax[i].plot(sol_lam_range_list[i,j], sol_int_renorm[i,j], zorder=100, label=sol_mus[j],markersize=4)
        # ax[i].plot(sol_lam_range_list[i,j], sol_int_range_list[i,j], linestyle='none', marker='.', zorder=100, label=sol_mus[j],markersize=4)


    # plot picked integration limits 
    for lim in iag_int_lims[i,:]:
        ax[i].axvline(lim)
    ax[i].grid(axis='y')

    ax[i].set_title(f'Si {wavelengths[i]:.2f} Å')
    ax[i].set_ylabel('Norm. Intensity')
    ax[i].set_xlabel('λ, Å')

    plt.sca(ax[i])

    plt.xlim((m3d_centre_wavelengths[i]-0.25), (m3d_centre_wavelengths[i]+0.25))
    plt.ylim(0.4,1.1)    
    ax[i].legend()

plt.tight_layout()
181/32:
# Replot the equivalent widths
# recalculate equivalent widths
new_eq_iag = np.zeros(eq_iag.shape)
for i, line_i in enumerate(major_krs):
    for j, thismu in enumerate(sol_mus):
            new_eq_iag[i,j] = integrate.simps(y=1-sol_int_renorm[i,j], x=sol_lam_range_list[i,j]) * 1000


fig, axs = plt.subplots(2,3, figsize=(15,10),squeeze=True)

# for i, run in enumerate(ex_1d_eqw):
#     axs[1,1].plot(sol_mus, ex_1d_eqw[:,i], '--o', label=round(test_cog.abnds[i],2))

for col, ax in zip(range(len(major_krs)), axs.flatten()):

    ax.plot(sol_mus, new_eq_iag[col],'r--x', label='IAG')
    ax.set_xlabel('mu')
    ax.set_ylabel('Eq. width, mÅ')
    ax.set_title(f'IAG & 1D LTE eq. widths, λ={m3d_centre_wavelengths[col]}')
    for i, run in enumerate(test_cog.abnds):
        ax.plot(sol_mus, eqwidths_1dlte[col,:,i], '--o', label=round(test_cog.abnds[i],2))
    ax.legend()


plt.tight_layout()
# plt.savefig('plots/IAG_ewq.pdf')
181/33: sol_mus
181/34:
def interp_abund(lte1d_lines_eq, lte1d_abundances, iag_eq):
    interpd_sol_abunds = np.zeros((len(lte1d_lines_eq), len(sol_mus)), dtype=object)
    for i, line_eq in enumerate(lte1d_lines_eq):
        for j, mu in enumerate(sol_mus):
            x = lte1d_lines_eq[i,j,:]
            y = lte1d_abundances
            f = interpolate.interp1d(x,y,fill_value='extrapolate')

            interpd_sol_abunds[i,j] = f(iag_eq[i,j])
    return interpd_sol_abunds
181/35: iag_1dlte_abunds = interp_abund(np.take(eqwidths_1dlte, [0,3,4], axis=0), test_cog.abnds, np.take(new_eq_iag, [0,3,4], axis=0))
181/36: iag_1dlte_abunds
181/37: NLTE3Dcorrections = np.load('data/3DNLTE_abund_corr.npy')
181/38: NLTE3Dcorrections
181/39: NLTE3Dcorrections.reshape(3,6)
181/40: iag_3DNLTE_corrected_abund = np.add(iag_1dlte_abunds, NLTE3Dcorrections.reshape(3,6))
181/41:
fig, ax = plt.subplots(1,len(iag_1dlte_abunds), figsize=(20,5))

for i, line in enumerate(iag_1dlte_abunds):
    ax[i].plot(sol_mus, iag_1dlte_abunds[i], 'o', label='1D LTE')
    ax[i].plot(sol_mus, iag_3DNLTE_corrected_abund[i], 'x', label='1D LTE + $\Delta$ 3D NLTE')

    ax[i].set_xlabel('mu')
    ax[i].set_ylabel('Rel. abundance, dex')
    ax[i].set_title(f' IAG spectrum, λ={np.take(m3d_centre_wavelengths,[0,3,4])[i]}')
    ax[i].set_ylim(7.47, 7.63)
    ax[i].legend(frameon=1)
plt.tight_layout()
# fig.savefig('plots/iag_3dnlte_abund_corr.pdf')
181/42: help(plt.legend())
181/43:
import sys
def sizeof_fmt(num, suffix='B'):
    ''' by Fred Cirera,  https://stackoverflow.com/a/1094933/1870254, modified'''
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)

for name, size in sorted(((name, sys.getsizeof(value)) for name, value in locals().items()),
                         key= lambda x: -x[1])[:10]:
    print("{:>30}: {:>8}".format(name, sizeof_fmt(size)))
190/1:
import matplotlib.pyplot as plt
from multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
190/2:
import matplotlib.pyplot as plt
from ../multi_py.multi import *
import numpy as np
import sys  

from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
191/1:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/multi_py')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
191/2:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/multi_py/')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
191/3:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('multi_py/Bergemann2020.mplstyle')
191/4:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('../main/multi_py/Bergemann2020.mplstyle')
191/5:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
191/6:
sav_fname = pjoin('../mdata/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../mdata/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
191/7:
sav_fname = pjoin('../../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
191/8:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('../main/multi_py/Bergemann2020.mplstyle')
191/9:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
191/10:
sav_fname = pjoin('../../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
191/11:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
191/12:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = 'runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = 'runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
191/13:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
NLTE3Drunfile = '../runs/Si_stag_NLTE_5x5x230_mus/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

LTE_runs = '../runs/Si_marcs_LTE_dir/'
LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
191/14:
wavelengths = [line.lam0 for line in NLTE3Dlines]
m3d_centre_wavelengths = [5645.613, 5772.146, 7034.901]
191/15:
# NLTE_obj = runobjects[1]
corrections = np.array([[LTE1d_cog.abnds_corr(NLTE3Drunobj, kr=thiskr, qmax=3.5, ang=ang) for ang in range(len(sol_mus))] for thiskr in major_krs])
eqwidths_1dlte = np.array([[LTE1d_cog.calc_weq(kr=kr, ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for kr in major_krs])
eqw_NLTE = [[NLTE3Dlines[line].calc_weq(ang=ang, qmax=3.5, norm=True) for ang in range(len(sol_mus))] for line in range(len((NLTE3Dlines)))]

d = { 'Wavelengths': wavelengths,
      'Abundance_cor': corrections,

}
191/16: corrections.shape
191/17:
def ax_text(i,j, ax, posx, posy, color='k'):
    
    d = {'3D NLTE Ab. cor.:': np.round(corrections[i,j],4)
        }
    
    add_text_to_ax(posx, posy, nice_string_output(d), ax, fontsize=8, color=color)
    return None
191/18:
fig_ew, ax_ew = plt.subplots(len(major_krs), len(sol_mus), figsize=(22,13))

abundances = LTE1d_cog.abnds

for i, kr in enumerate(major_krs):
    for j, mu in enumerate(sol_mus):
        ax_ew[i,j].plot(LTE1d_cog.abnds, eqwidths_1dlte[i,j], '--x', label='1D LTE')
        ax_ew[i,j].plot(NLTE3Drunobj.abnd, eqw_NLTE[i][j], 'rx', label='3D NLTE')
        ax_ew[i,j].set_title(f'Si {m3d_centre_wavelengths[i]:.2f} Å, $\mu = {sol_mus[j]:.1f}$')
        ax_ew[i,j].set_ylabel('Eq. width, mÅ')
        ax_ew[i,j].set_xlabel('Rel. abundance, dex')
        ax_text(i,j, ax_ew[i,j],  0.24, 0.15)

        ax_ew[i,j].legend()

plt.tight_layout()
# fig_ew.savefig('plots/3dabundcorr_mu.pdf')
191/19: # np.save('data/3DNLTE_abund_corr', corrections)
191/20:
fig = plt.figure(figsize=(10,10))

ax = fig.add_subplot(111, projection='polar')

contours = [np.arccos(sol_mu) for sol_mu in sol_mus]
rmax = np.arccos(0)
ax.set_rgrids(contours, labels=sol_mus)
# ax.set_xticks(np.arange(0,2.0*np.pi,np.pi/6.0))
# ax.set_rmax(rmax)
# ax.set_ylim(0,4)
# ax.set_yticks(contours)


# plt.savefig("polar_coordinates_02.png", bbox_inches='atight')

plt.show()
191/21: rmax
197/1:
import matplotlib.pyplot as plt

import numpy as np
import sys  
sys.path.append('../main/')
from multi_py.multi import *
from os.path import dirname, join as pjoin
import scipy.io as sio
from scipy.io import readsav
import copy
import pandas as pd
import os
from scipy import integrate
from scipy.signal import argrelextrema





%config InlineBackend.figure_format='svg'
plt.style.use('default')
plt.style.use('../main/multi_py/Bergemann2020.mplstyle')
197/2:
sys.path.append('/lustre/astro/ngray/External_Functions')
from ExternalFunctions import nice_string_output, add_text_to_ax # useful functions to print fit results on figure
197/3:
sav_fname = pjoin('../../data/spectra/1631885174310_iag_sun_Si.sav')
sav_data = readsav(sav_fname)
f = open('../../data/spectra/sun_kpnomu1_6000_8000A.txt')
obs_spec2 = np.loadtxt(fname=f)

# simulation has been run with mus: 1, 0.9, 0.8, 0.6, 0.4, 0.2
# specify the indecies corresponding to these angles in the solar data
sol_mu_ind = [0, 4, 5, 7, 9, 11]

# get the flux(intensity) and wavelengths corresponding to these angles
sol_fluxes = [sav_data['iag_sun'].flux[0][ang] for ang in sol_mu_ind]
sol_lams = [sav_data['iag_sun'].wave[0][ang] for ang in sol_mu_ind]
sol_mus = [sav_data['iag_sun'].mu[0][ang] for ang in sol_mu_ind]
197/4:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# NLTE3Drunfile = '../runs/Si_stag_NLTE_5x5x230_mus/output/'
NLTE3Drunfile = '../runs/iosmet_runs/SiStagNLTE5_15D/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

# LTE_runs = '../runs/Si_marcs_LTE_dir/'
LTE_runs = '../runs/iosmet_runs/SiMarcsLTEdir/'

LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
197/5:
def get_lines(thisrun, krs):
    lines = []
    for kr in krs:
        lines.append(thisrun.line[kr])
    return lines
197/6:
major_krs = [286, 299, 427] # 292 and 302 removed - empty gaps; 457 removed - does not appear in the ref paper

# runfiles = ['runs/Si_marcs_LTE_mus/output/', 'runs/Si_stag_NLTE_5x5x230_mus/output/']
# NLTE3Drunfile = '../runs/Si_stag_NLTE_5x5x230_mus/output/'
NLTE3Drunfile = '../runs/iosmet_runs/SiStagNLTE5_15D/output/'

# runobjects = [m3d(thisrun, lines=major_krs, conts=[]) for thisrun in runfiles]
# linesobj = [get_lines(thisrunobj, major_krs) for thisrunobj in runobjects]

NLTE3Drunobj = m3d(NLTE3Drunfile, lines=major_krs, conts=[])
NLTE3Dlines = get_lines(NLTE3Drunobj, major_krs)

# LTE_runs = '../runs/Si_marcs_LTE_dir/'
LTE_runs = '../runs/iosmet_runs/SiMarcsLTEdir/'

LTE1d_cog = CoG(runs=LTE_runs, lines=major_krs)
   1: rmax
   2: %history -g -f anyfilename
